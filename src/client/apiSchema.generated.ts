/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v2/projects/namespaces/{id}": {
    /** Update namespace */
    put: operations["update_1"];
  };
  "/v2/projects/keys/{keyId}/tags": {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    put: operations["tagKey_1"];
  };
  "/v2/projects/keys/{id}/complex-update": {
    /** More */
    put: operations["complexEdit_1"];
  };
  "/v2/projects/keys/{id}": {
    /** Edits key name */
    put: operations["edit_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override": {
    /**
     * Resolve conflict (override) 
     * @description Resolves translation conflict. The old translation will be overridden.
     */
    put: operations["resolveTranslationSetOverride_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing": {
    /**
     * Resolve conflict (keep existing) 
     * @description Resolves translation conflict. The old translation will be kept.
     */
    put: operations["resolveTranslationSetKeepExisting_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/resolve-all/set-override": {
    /**
     * Resolve all translation conflicts (override) 
     * @description Resolves all translation conflicts for provided language. The old translations will be overridden.
     */
    put: operations["resolveTranslationSetOverride_3"];
  };
  "/v2/projects/import/result/languages/{languageId}/resolve-all/set-keep-existing": {
    /**
     * Resolve all translation conflicts (keep existing) 
     * @description Resolves all translation conflicts for provided language. The old translations will be kept.
     */
    put: operations["resolveTranslationSetKeepExisting_3"];
  };
  "/v2/projects/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}": {
    /**
     * Pair existing language 
     * @description Sets existing language to pair with language to import. Data will be imported to selected existing language when applied.
     */
    put: operations["selectExistingLanguage_1"];
  };
  "/v2/projects/import/result/languages/{importLanguageId}/reset-existing": {
    /**
     * Reset existing language pairing 
     * @description Resets existing language paired with language to import.
     */
    put: operations["resetExistingLanguage_1"];
  };
  "/v2/projects/import/result/files/{fileId}/select-namespace": {
    /**
     * Select namespace 
     * @description Sets namespace for file to import.
     */
    put: operations["selectNamespace_1"];
  };
  "/v2/projects/import/apply": {
    /**
     * Apply 
     * @description Imports the data prepared in previous step
     */
    put: operations["applyImport_1"];
  };
  "/v2/projects/batch-jobs/{id}/cancel": {
    /** Stops batch operation (if possible) */
    put: operations["cancel_1"];
  };
  "/v2/projects/translations/{translationId}/set-state/{state}": {
    /** Sets translation state */
    put: operations["setTranslationState_1"];
  };
  "/v2/projects/translations/{translationId}/comments/{commentId}/set-state/{state}": {
    /** Sets state of translation comment */
    put: operations["setState_1"];
  };
  "/v2/projects/translations/{translationId}/comments/{commentId}": {
    /** Returns single translation comment */
    get: operations["get_7"];
    /** Updates single translation comment */
    put: operations["update_3"];
    /** Deletes the translation comment */
    delete: operations["delete_6"];
  };
  "/v2/projects/translations/{translationId}/set-outdated-flag/{state}": {
    /** Set's "outdated" indication */
    put: operations["setOutdated_1"];
  };
  "/v2/projects/translations/{translationId}/dismiss-auto-translated-state": {
    /** Removes "auto translated" indication */
    put: operations["dismissAutoTranslatedState_1"];
  };
  "/v2/projects/translations": {
    /** Returns translations in project */
    get: operations["getTranslations_1"];
    /** Sets translations for existing key */
    put: operations["setTranslations_1"];
    /** Sets translations for existing or not existing key */
    post: operations["createOrUpdateTranslations_1"];
  };
  "/v2/projects/languages/{languageId}": {
    /** Edits language */
    put: operations["editLanguage_1"];
    /** Deletes specific language */
    delete: operations["deleteLanguage_3"];
  };
  "/v2/projects/keys/{keyId}/auto-translate": {
    /**
     * Auto translates keys 
     * @description Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     * 
     * This will replace the the existing translation with the result obtained from specified source!
     */
    put: operations["autoTranslate_1"];
  };
  "/v2/projects/keys/info": {
    /** Returns information about keys. (KeyData, Screenshots, Translation in specified language)If key is not found, it's not included in the response. */
    post: operations["getInfo_1"];
  };
  "/v2/projects/keys/import-resolvable": {
    /** Import's new keys with translations. Translations can be updated, when specified. */
    post: operations["importKeys_1"];
  };
  "/v2/projects/keys/import": {
    /** Imports new keys with translations. If key already exists, its translations and tags are not updated. */
    post: operations["importKeys_3"];
  };
  "/v2/projects/keys/create": {
    /** Creates new key */
    post: operations["create_2"];
  };
  "/v2/projects/keys": {
    /** Returns all keys in the project */
    get: operations["getAll_4"];
    /** Creates new key */
    post: operations["create_3"];
    /** Deletes one or multiple keys by their IDs in request body */
    delete: operations["delete_4"];
  };
  "/v2/projects/start-batch-job/untag-keys": {
    /** Remove tags */
    post: operations["untagKeys_1"];
  };
  "/v2/projects/start-batch-job/tag-keys": {
    /** Add tags */
    post: operations["tagKeys_1"];
  };
  "/v2/projects/start-batch-job/set-translation-state": {
    /** Set translation state */
    post: operations["setTranslationState_3"];
  };
  "/v2/projects/start-batch-job/set-keys-namespace": {
    /** Set keys namespace */
    post: operations["setKeysNamespace_1"];
  };
  "/v2/projects/start-batch-job/pre-translate-by-tm": {
    /**
     * Pre-translate by TM 
     * @description Pre-translate provided keys to provided languages by TM.
     */
    post: operations["translate_1"];
  };
  "/v2/projects/start-batch-job/machine-translate": {
    /**
     * Machine Translation 
     * @description Translate provided keys to provided languages through primary MT provider.
     */
    post: operations["machineTranslation_1"];
  };
  "/v2/projects/start-batch-job/delete-keys": {
    /** Delete keys */
    post: operations["deleteKeys_1"];
  };
  "/v2/projects/start-batch-job/copy-translations": {
    /**
     * Copy translation values 
     * @description Copy translation values from one language to other languages.
     */
    post: operations["copyTranslations_1"];
  };
  "/v2/projects/start-batch-job/clear-translations": {
    /**
     * Clear translation values 
     * @description Clear translation values for provided keys in selected languages.
     */
    post: operations["clearTranslations_1"];
  };
  "/v2/projects/import": {
    /**
     * Add files 
     * @description Prepares provided files to import.
     */
    post: operations["addFiles_1"];
    /**
     * Delete 
     * @description Deletes prepared import data.
     */
    delete: operations["cancelImport_1"];
  };
  "/v2/projects/export": {
    /** Exports data */
    get: operations["export_1"];
    /** Exports data (post). Useful when providing params exceeding allowed query size. */
    post: operations["exportPost_1"];
  };
  "/v2/projects/big-meta": {
    /** Stores a bigMeta for a project */
    post: operations["store_1"];
  };
  "/v2/projects/translations/{translationId}/comments": {
    /** Returns translation comments of translation */
    get: operations["getAll_6"];
    /** Creates a translation comment */
    post: operations["create_5"];
  };
  "/v2/projects/translations/create-comment": {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    post: operations["create_7"];
  };
  "/v2/projects/suggest/translation-memory": {
    /**
     * Suggests machine translations from translation memory.
     * 
     * The result is always sorted by similarity, so sorting is not supported.
     */
    post: operations["suggestTranslationMemory_1"];
  };
  "/v2/projects/suggest/machine-translations": {
    /** Suggests machine translations from enabled services */
    post: operations["suggestMachineTranslations_1"];
  };
  "/v2/projects/languages": {
    /** Returns all project languages */
    get: operations["getAll_8"];
    /** Creates language */
    post: operations["createLanguage_1"];
  };
  "/v2/projects/keys/{keyId}/screenshots": {
    /** Returns all screenshots for specified key */
    get: operations["getKeyScreenshots"];
    /** Upload screenshot for specific key */
    post: operations["uploadScreenshot"];
  };
  "/v2/image-upload": {
    /** Uploads an image for later use */
    post: operations["upload"];
  };
  "/v2/projects/used-namespaces": {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    get: operations["getUsedNamespaces_1"];
  };
  "/v2/projects/tags": {
    /** Returns project tags */
    get: operations["getAll_2"];
  };
  "/v2/projects/namespaces": {
    /** Returns all project namespaces */
    get: operations["getAllNamespaces_1"];
  };
  "/v2/projects/namespace-by-name/{name}": {
    /** Update namespace */
    get: operations["getByName_1"];
  };
  "/v2/projects/keys/search": {
    /** This endpoint helps you to find desired key by keyName, base translation or translation in specified language. */
    get: operations["searchForKey_1"];
  };
  "/v2/projects/activity": {
    /** Returns project history */
    get: operations["getActivity_1"];
  };
  "/v2/projects/my-batch-jobs": {
    /** Lists all batch operations in project started by current user */
    get: operations["myList_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations": {
    /**
     * Get translations 
     * @description Returns translations prepared to import.
     */
    get: operations["getImportTranslations_1"];
  };
  "/v2/projects/import/result/languages/{languageId}": {
    /**
     * Get import language 
     * @description Returns language prepared to import.
     */
    get: operations["getImportLanguage_1"];
    /**
     * Delete language 
     * @description Deletes language prepared to import.
     */
    delete: operations["deleteLanguage_1"];
  };
  "/v2/projects/import/result/files/{importFileId}/issues": {
    /**
     * Get file issues 
     * @description Returns issues for uploaded file.
     */
    get: operations["getImportFileIssues_1"];
  };
  "/v2/projects/import/result": {
    /**
     * Get result 
     * @description Returns the result of preparation.
     */
    get: operations["getImportResult_1"];
  };
  "/v2/projects/import/all-namespaces": {
    /**
     * Get namespaces 
     * @description Returns all existing and imported namespaces
     */
    get: operations["getAllNamespaces_3"];
  };
  "/v2/projects/current-batch-jobs": {
    /**
     * Returns all running and pending batch operations 
     * @description Completed batch operations are returned only if they are not older than 1 hour. If user doesn't have permission to view all batch operations, only their operations are returned.
     */
    get: operations["currentJobs_1"];
  };
  "/v2/projects/batch-jobs/{id}": {
    /** Returns batch operation */
    get: operations["get_5"];
  };
  "/v2/projects/batch-jobs": {
    /** Lists all batch operations in project */
    get: operations["list_1"];
  };
  "/v2/projects/translations/{translationId}/history": {
    /**
     * Returns history of specific translation. 
     * 
     * Sorting is not supported for supported. It is automatically sorted from newest to oldest.
     */
    get: operations["getTranslationHistory_1"];
  };
  "/v2/projects/translations/{languages}": {
    /** Returns all translations for specified languages */
    get: operations["getAllTranslations_1"];
  };
  "/v2/projects/translations/select-all": {
    /** Get select all keys */
    get: operations["getSelectAllKeyIds_1"];
  };
  "/v2/projects/stats/daily-activity": {
    /** Returns project daily amount of events */
    get: operations["getProjectDailyActivity_1"];
  };
  "/v2/projects/stats": {
    /** Returns project stats */
    get: operations["getProjectStats_1"];
  };
  "/v2/api-keys/current": {
    /** Returns current API key info */
    get: operations["getCurrent_1"];
  };
  "/api/project/export/jsonZip": {
    /**
     * Exports data as ZIP of jsons 
     * @deprecated
     */
    get: operations["doExportJsonZip_1"];
  };
  "/v2/projects/keys/{keyId}/tags/{tagId}": {
    /** Removes tag with provided id from key with provided id */
    delete: operations["removeTag_1"];
  };
  "/v2/projects/keys/{ids}": {
    /** Deletes one or multiple keys by their IDs */
    delete: operations["delete_2"];
  };
  "/v2/projects/keys/{keyId}/screenshots/{ids}": {
    /** Deletes multiple screenshots by ids */
    delete: operations["deleteScreenshots"];
  };
  "/v2/image-upload/{ids}": {
    /** Deletes uploaded images */
    delete: operations["delete_9"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserUpdateRequestDto: {
      name: string;
      email: string;
      currentPassword?: string;
      /** @description Callback url for link sent in e-mail. This may be omitted, when server has set frontEndUrl in properties. */
      callbackUrl?: string;
    };
    Avatar: {
      large: string;
      thumbnail: string;
    };
    Links: {
      [key: string]: components["schemas"]["Link"] | undefined;
    };
    PrivateUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      mfaEnabled: boolean;
      avatar?: components["schemas"]["Avatar"];
      /** @enum {string} */
      accountType: "LOCAL" | "LDAP" | "THIRD_PARTY";
      /** @enum {string} */
      globalServerRole: "USER" | "ADMIN";
      deletable: boolean;
      needsSuperJwtToken: boolean;
    };
    UserUpdatePasswordRequestDto: {
      currentPassword: string;
      password: string;
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    UserTotpEnableRequestDto: {
      totpKey: string;
      otp: string;
      password: string;
    };
    UserMfaRecoveryRequestDto: {
      password: string;
    };
    EditProjectDTO: {
      name: string;
      slug?: string;
      /** Format: int64 */
      baseLanguageId?: number;
      description?: string;
    };
    ComputedPermissionModel: {
      permissionModel?: components["schemas"]["PermissionModel"];
      /** @enum {string} */
      origin: "ORGANIZATION_BASE" | "DIRECT" | "ORGANIZATION_OWNER" | "NONE" | "SERVER_ADMIN";
      /**
       * @description The user's permission type. This field is null if uses granular permissions 
       * @enum {string}
       */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @deprecated 
       * @description Deprecated (use translateLanguageIds). 
       * 
       * List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      permittedLanguageIds?: (number)[];
      /**
       * @description Granted scopes to the user. When user has type permissions, this field contains permission scopes of the type. 
       * @example [
       *   "KEYS_EDIT",
       *   "TRANSLATIONS_VIEW"
       * ]
       */
      scopes: ("translations.view" | "translations.edit" | "keys.edit" | "screenshots.upload" | "screenshots.delete" | "screenshots.view" | "activity.view" | "languages.edit" | "admin" | "project.edit" | "members.view" | "members.edit" | "translation-comments.add" | "translation-comments.edit" | "translation-comments.set-state" | "translations.state-edit" | "keys.view" | "keys.delete" | "keys.create" | "batch-jobs.view" | "batch-jobs.cancel" | "translations.batch-by-tm" | "translations.batch-machine")[];
      /**
       * @description List of languages user can change state to. If null, changing state of all language values is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      stateChangeLanguageIds?: (number)[];
      /**
       * @description List of languages user can view. If null, all languages view is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      viewLanguageIds?: (number)[];
      /**
       * @description List of languages user can translate to. If null, all languages editing is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      translateLanguageIds?: (number)[];
    };
    LanguageModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description Language name in english 
       * @example Czech
       */
      name: string;
      /**
       * @description Language tag according to BCP 47 definition 
       * @example cs-CZ
       */
      tag: string;
      /**
       * @description Language name in this language 
       * @example čeština
       */
      originalName?: string;
      /**
       * @description Language flag emoji as UTF-8 emoji 
       * @example 🇨🇿
       */
      flagEmoji?: string;
      /**
       * @description Whether is base language of project 
       * @example false
       */
      base: boolean;
    };
    /**
     * @description Current user's direct permission 
     * @example MANAGE
     */
    PermissionModel: {
      /**
       * @description Granted scopes to the user. When user has type permissions, this field contains permission scopes of the type. 
       * @example [
       *   "KEYS_EDIT",
       *   "TRANSLATIONS_VIEW"
       * ]
       */
      scopes: ("translations.view" | "translations.edit" | "keys.edit" | "screenshots.upload" | "screenshots.delete" | "screenshots.view" | "activity.view" | "languages.edit" | "admin" | "project.edit" | "members.view" | "members.edit" | "translation-comments.add" | "translation-comments.edit" | "translation-comments.set-state" | "translations.state-edit" | "keys.view" | "keys.delete" | "keys.create" | "batch-jobs.view" | "batch-jobs.cancel" | "translations.batch-by-tm" | "translations.batch-machine")[];
      /**
       * @description The user's permission type. This field is null if uses granular permissions 
       * @enum {string}
       */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @deprecated 
       * @description Deprecated (use translateLanguageIds). 
       * 
       * List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      permittedLanguageIds?: (number)[];
      /**
       * @description List of languages user can translate to. If null, all languages editing is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      translateLanguageIds?: (number)[];
      /**
       * @description List of languages user can view. If null, all languages view is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      viewLanguageIds?: (number)[];
      /**
       * @description List of languages user can change state to. If null, changing state of all language values is permitted. 
       * @example [
       *   200001,
       *   200004
       * ]
       */
      stateChangeLanguageIds?: (number)[];
    };
    ProjectModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      organizationOwner?: components["schemas"]["SimpleOrganizationModel"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      /** @enum {string} */
      organizationRole?: "MEMBER" | "OWNER";
      directPermission?: components["schemas"]["PermissionModel"];
      computedPermission: components["schemas"]["ComputedPermissionModel"];
    };
    SimpleOrganizationModel: {
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      basePermissions: components["schemas"]["PermissionModel"];
      avatar?: components["schemas"]["Avatar"];
    };
    UpdateNamespaceDto: {
      name: string;
    };
    NamespaceModel: {
      /**
       * Format: int64 
       * @description The id of namespace 
       * @example 10000048
       */
      id: number;
      /** @example homepage */
      name: string;
    };
    MachineTranslationLanguagePropsDto: {
      /**
       * Format: int64 
       * @description The language to apply those rules. If null, then this settings are default.
       */
      targetLanguageId?: number;
      /**
       * @description This service will be used for automated translation 
       * @enum {string}
       */
      primaryService?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
      /** @description List of enabled services */
      enabledServices: ("GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE")[];
    };
    SetMachineTranslationSettingsDto: {
      settings: (components["schemas"]["MachineTranslationLanguagePropsDto"])[];
    };
    CollectionModelLanguageConfigItemModel: {
      _embedded?: {
        languageConfigs?: (components["schemas"]["LanguageConfigItemModel"])[];
      };
    };
    LanguageConfigItemModel: {
      /**
       * Format: int64 
       * @description When null, its a default configuration applied to not configured languages
       */
      targetLanguageId?: number;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageTag?: string;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageName?: string;
      /**
       * @description Service used for automated translating 
       * @enum {string}
       */
      primaryService?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
      /** @description Services to be used for suggesting */
      enabledServices: ("GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE")[];
    };
    TagKeyDto: {
      name: string;
    };
    TagModel: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    ComplexEditKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /** @description Translations to update */
      translations?: {
        [key: string]: string | undefined;
      };
      /** @description Tags of the key. If not provided tags won't be modified */
      tags?: (string)[];
      /** @description IDs of screenshots to delete */
      screenshotIdsToDelete?: (number)[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: (number)[];
      screenshotsToAdd?: (components["schemas"]["KeyScreenshotDto"])[];
    };
    KeyInScreenshotPositionDto: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    KeyScreenshotDto: {
      text?: string;
      /**
       * Format: int64 
       * @description Ids of screenshot uploaded with /v2/image-upload endpoint
       */
      uploadedImageId: number;
      positions?: (components["schemas"]["KeyInScreenshotPositionDto"])[];
    };
    KeyInScreenshotModel: {
      /** Format: int64 */
      keyId: number;
      position?: components["schemas"]["KeyInScreenshotPosition"];
      keyName: string;
      keyNamespace?: string;
      originalText?: string;
    };
    KeyInScreenshotPosition: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    KeyWithDataModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key 
       * @example homepage
       */
      namespace?: string;
      /**
       * @description Translations object containing values updated in this request 
       * @example {
       *   "en": {
       *     "id": 100000003,
       *     "text": "This is super translation!"
       *   }
       * }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"] | undefined;
      };
      /** @description Tags of key */
      tags: (components["schemas"]["TagModel"])[];
      /** @description Screenshots of the key */
      screenshots: (components["schemas"]["ScreenshotModel"])[];
    };
    /** @description Screenshots of the key */
    ScreenshotModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description File name, which may be downloaded from the screenshot path.
       * 
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      filename: string;
      /**
       * @description Thumbnail file name, which may be downloaded from the screenshot path.
       * 
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      thumbnail: string;
      fileUrl: string;
      thumbnailUrl: string;
      /** Format: date-time */
      createdAt?: string;
      keyReferences: (components["schemas"]["KeyInScreenshotModel"])[];
      location?: string;
      /** Format: int32 */
      width?: number;
      /** Format: int32 */
      height?: number;
    };
    /**
     * @description Translations object containing values updated in this request 
     * @example {
     *   "en": {
     *     "id": 100000003,
     *     "text": "This is super translation!"
     *   }
     * }
     */
    TranslationModel: {
      /**
       * Format: int64 
       * @description Id of translation record
       */
      id: number;
      /** @description Translation text */
      text?: string;
      /**
       * @description State of translation 
       * @enum {string}
       */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** @description Whether base language translation was changed after this translation was updated */
      outdated: boolean;
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * @description Which machine translation service was used to auto translate this 
       * @enum {string}
       */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
    };
    EditKeyDto: {
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
    };
    KeyModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key 
       * @example homepage
       */
      namespace?: string;
    };
    ProjectInviteUserDto: {
      /** @enum {string} */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @description Granted scopes for the invited user 
       * @example [
       *   "translations.view",
       *   "translations.edit"
       * ]
       */
      scopes?: (string)[];
      /**
       * @deprecated 
       * @description Deprecated -> use translate languages
       */
      languages?: (number)[];
      /**
       * @deprecated 
       * @description Languages user can translate to
       */
      translateLanguages?: (number)[];
      /**
       * @deprecated 
       * @description Languages user can view
       */
      viewLanguages?: (number)[];
      /**
       * @deprecated 
       * @description Languages user can change translation state (review)
       */
      stateChangeLanguages?: (number)[];
      /** @description Email to send invitation to */
      email?: string;
      /** @description Name of invited user */
      name?: string;
    };
    ProjectInvitationModel: {
      /** Format: int64 */
      id: number;
      code: string;
      /** @enum {string} */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      permittedLanguageIds?: (number)[];
      /** Format: date-time */
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
      permission: components["schemas"]["PermissionModel"];
    };
    AutoTranslationSettingsDto: {
      /** @description If true, new keys will be automatically translated via batch operation using translation memory when 100% match is found */
      usingTranslationMemory: boolean;
      /** @description If true, new keys will be automatically translated via batch operationusing primary machine translation service.When "usingTranslationMemory" is enabled, it tries to translate it with translation memory first. */
      usingMachineTranslation: boolean;
      /**
       * @description If true, import will trigger batch operation to translate the new new keys.
       * It includes also the data imported via CLI, Figma, or other integrations using batch key import.
       */
      enableForImport: boolean;
    };
    SetFileNamespaceRequest: {
      namespace?: string;
    };
    TranslationCommentModel: {
      /**
       * Format: int64 
       * @description Id of translation comment record
       */
      id: number;
      /** @description Text of comment */
      text: string;
      /**
       * @description State of translation 
       * @enum {string}
       */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      author: components["schemas"]["UserAccountModel"];
      /**
       * Format: date-time 
       * @description Date when it was created
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description Date when it was updated
       */
      updatedAt: string;
    };
    /** @description User who created the comment */
    UserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      avatar?: components["schemas"]["Avatar"];
      /** @enum {string} */
      globalServerRole: "USER" | "ADMIN";
      deleted: boolean;
      disabled: boolean;
    };
    TranslationCommentDto: {
      text: string;
      /** @enum {string} */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    SetTranslationsWithKeyDto: {
      /**
       * @description Key name to set translations for 
       * @example what_a_key_to_translate
       */
      key: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation 
       * @example {
       *   "en": "What a translated value!",
       *   "cs": "Jaká to přeložená hodnota!"
       * }
       */
      translations: {
        [key: string]: string | undefined;
      };
      /**
       * @description List of languages to return translations for. 
       * 
       * If not provided, only modified translation will be provided.
       *      
       * @example [
       *   "en",
       *   "de",
       *   "fr"
       * ]
       */
      languagesToReturn?: (string)[];
    };
    SetTranslationsResponseModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * @description The namespace of the key 
       * @example homepage
       */
      keyNamespace?: string;
      /**
       * @description Translations object containing values updated in this request 
       * @example {
       *   "en": {
       *     "id": 100000003,
       *     "text": "This is super translation!"
       *   }
       * }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"] | undefined;
      };
    };
    LanguageDto: {
      /**
       * @description Language name in english 
       * @example Czech
       */
      name: string;
      /**
       * @description Language name in this language 
       * @example čeština
       */
      originalName: string;
      /**
       * @description Language tag according to BCP 47 definition 
       * @example cs-CZ
       */
      tag: string;
      /**
       * @description Language flag emoji as UTF-8 emoji 
       * @example 🇨🇿
       */
      flagEmoji?: string;
    };
    UpdatePatDto: {
      /** @description New description of the PAT */
      description: string;
    };
    PatModel: {
      /** Format: int64 */
      id: number;
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      lastUsedAt?: number;
    };
    RegeneratePatDto: {
      /**
       * Format: int64 
       * @description Expiration date in epoch format (milliseconds). When null key never expires. 
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RevealedPatModel: {
      token: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    SetOrganizationRoleDto: {
      /** @enum {string} */
      roleType: "MEMBER" | "OWNER";
    };
    OrganizationDto: {
      /** @example Beautiful organization */
      name: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @example btforg */
      slug?: string;
    };
    OrganizationModel: {
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      basePermissions: components["schemas"]["PermissionModel"];
      /**
       * @description The role of currently authorized user. 
       *     
       * Can be null when user has direct access to one of the projects owned by the organization. 
       * @enum {string}
       */
      currentUserRole?: "MEMBER" | "OWNER";
      avatar?: components["schemas"]["Avatar"];
    };
    OrganizationInviteUserDto: {
      /** @enum {string} */
      roleType: "MEMBER" | "OWNER";
      /** @description Name of invited user */
      name?: string;
      /** @description Email to send invitation to */
      email?: string;
    };
    OrganizationInvitationModel: {
      /** Format: int64 */
      id: number;
      code: string;
      /** @enum {string} */
      type: "MEMBER" | "OWNER";
      /** Format: date-time */
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    SetLicenseKeyDto: {
      licenseKey: string;
    };
    EeSubscriptionModel: {
      name: string;
      licenseKey: string;
      enabledFeatures: ("GRANULAR_PERMISSIONS" | "PRIORITIZED_FEATURE_REQUESTS" | "PREMIUM_SUPPORT" | "DEDICATED_SLACK_CHANNEL" | "ASSISTED_UPDATES" | "DEPLOYMENT_ASSISTANCE" | "BACKUP_CONFIGURATION" | "TEAM_TRAINING" | "ACCOUNT_MANAGER" | "STANDARD_SUPPORT")[];
      /** Format: int64 */
      currentPeriodEnd?: number;
      cancelAtPeriodEnd: boolean;
      /** Format: int64 */
      currentUserCount: number;
      /** @enum {string} */
      status: "ACTIVE" | "CANCELED" | "PAST_DUE" | "UNPAID" | "ERROR" | "KEY_USED_BY_ANOTHER_INSTANCE";
      /** Format: date-time */
      lastValidCheck?: string;
    };
    V2EditApiKeyDto: {
      scopes: (string)[];
      description?: string;
    };
    ApiKeyModel: {
      /**
       * Format: int64 
       * @description ID of the API key
       */
      id: number;
      /** @description Description */
      description: string;
      /** @description Username of user owner */
      username?: string;
      /** @description Full name of user owner */
      userFullName?: string;
      /**
       * Format: int64 
       * @description Api key's project ID
       */
      projectId: number;
      /** @description Api key's project name */
      projectName: string;
      /**
       * Format: int64 
       * @description Timestamp of API key expiraion
       */
      expiresAt?: number;
      /**
       * Format: int64 
       * @description Timestamp of API key last usage
       */
      lastUsedAt?: number;
      /**
       * @description Api key's permission scopes 
       * @example [
       *   "screenshots.upload",
       *   "screenshots.delete",
       *   "translations.edit",
       *   "screenshots.view",
       *   "translations.view",
       *   "keys.edit"
       * ]
       */
      scopes: (string)[];
    };
    RegenerateApiKeyDto: {
      /**
       * Format: int64 
       * @description Expiration date in epoch format (milliseconds). When null key never expires. 
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RevealedApiKeyModel: {
      /** @description Resulting user's api key */
      key: string;
      /** Format: int64 */
      id: number;
      userFullName?: string;
      projectName: string;
      scopes: (string)[];
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      projectId: number;
      username?: string;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    SuperTokenRequest: {
      /** @description Has to be provided when TOTP enabled */
      otp?: string;
      /** @description Has to be provided when TOTP not enabled */
      password?: string;
    };
    GenerateSlugDto: {
      name: string;
      oldSlug?: string;
    };
    BusinessEventReportRequest: {
      eventName: string;
      anonymousUserId?: string;
      /** Format: int64 */
      organizationId?: number;
      /** Format: int64 */
      projectId?: number;
      data?: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    IdentifyRequest: {
      anonymousUserId: string;
    };
    CreateProjectDTO: {
      name: string;
      languages: (components["schemas"]["LanguageDto"])[];
      /** @description Slug of your project used in url e.g. "/v2/projects/what-a-project". If not provided, it will be generated */
      slug?: string;
      /**
       * Format: int64 
       * @description Organization to create the project in
       */
      organizationId: number;
      /** @description Tag of one of created languages, to select it as base language. If not provided, first language will be selected as base. */
      baseLanguageTag?: string;
    };
    GetKeysRequestDto: {
      keys: (components["schemas"]["KeyDefinitionDto"])[];
      /** @description Tags to return language translations in */
      languageTags: (string)[];
    };
    KeyDefinitionDto: {
      name: string;
      namespace?: string;
    };
    CollectionModelKeyWithDataModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeyWithDataModel"])[];
      };
    };
    ImportKeysResolvableDto: {
      keys: (components["schemas"]["ImportKeysResolvableItemDto"])[];
    };
    ImportKeysResolvableItemDto: {
      /**
       * @description Key name to set translations for 
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      screenshots?: (components["schemas"]["KeyScreenshotDto"])[];
      /** @description Object mapping language tag to translation */
      translations: {
        [key: string]: components["schemas"]["ImportTranslationResolvableDto"] | undefined;
      };
    };
    /** @description Object mapping language tag to translation */
    ImportTranslationResolvableDto: {
      /**
       * @description Translation text 
       * @example Hello! I am a translation!
       */
      text: string;
      /**
       * @description Determines, how conflict is resolved.
       * 
       * - KEEP: Translation is not changed
       * - OVERRIDE: Translation is overridden
       * - NEW: New translation is created)
       *  
       * @example Hello! I am a translation! 
       * @enum {string}
       */
      resolution: "KEEP" | "OVERRIDE" | "NEW";
    };
    KeyImportResolvableResultModel: {
      /** @description List of keys */
      keys: (components["schemas"]["KeyModel"])[];
      /** @description Map uploadedImageId to screenshot */
      screenshots: {
        [key: string]: components["schemas"]["ScreenshotModel"] | undefined;
      };
    };
    ImportKeysDto: {
      keys: (components["schemas"]["ImportKeysItemDto"])[];
    };
    ImportKeysItemDto: {
      /**
       * @description Key name to set translations for 
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation 
       * @example {
       *   "en": "What a translated value!",
       *   "cs": "Jaká to přeložená hodnota!"
       * }
       */
      translations: {
        [key: string]: string | undefined;
      };
      /**
       * @description Tags of the key 
       * @example [
       *   "homepage",
       *   "user-profile"
       * ]
       */
      tags?: (string)[];
    };
    CreateKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      translations?: {
        [key: string]: string | undefined;
      };
      tags?: (string)[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: (number)[];
      screenshots?: (components["schemas"]["KeyScreenshotDto"])[];
    };
    UntagKeysRequest: {
      keyIds: (number)[];
      tags: (string)[];
    };
    BatchJobModel: {
      /**
       * Format: int64 
       * @description Batch job id
       */
      id: number;
      /**
       * @description Status of the batch job 
       * @enum {string}
       */
      status: "PENDING" | "RUNNING" | "SUCCESS" | "FAILED" | "CANCELLED";
      /**
       * @description Type of the batch job 
       * @enum {string}
       */
      type: "PRE_TRANSLATE_BT_TM" | "MACHINE_TRANSLATE" | "AUTO_TRANSLATE" | "DELETE_KEYS" | "SET_TRANSLATIONS_STATE" | "CLEAR_TRANSLATIONS" | "COPY_TRANSLATIONS" | "TAG_KEYS" | "UNTAG_KEYS" | "SET_KEYS_NAMESPACE";
      /**
       * Format: int32 
       * @description Total items, that have been processed so far
       */
      progress: number;
      /**
       * Format: int32 
       * @description Total items
       */
      totalItems: number;
      author?: components["schemas"]["SimpleUserAccountModel"];
      /**
       * Format: int64 
       * @description The time when the job created
       */
      createdAt: number;
      /**
       * Format: int64 
       * @description The time when the job was last updated (status change)
       */
      updatedAt: number;
      /**
       * Format: int64 
       * @description The activity revision id, that stores the activity details of the job
       */
      activityRevisionId?: number;
      /** @description If the job failed, this is the error message */
      errorMessage?: string;
    };
    /** @description The user who started the job */
    SimpleUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
    };
    TagKeysRequest: {
      keyIds: (number)[];
      tags: (string)[];
    };
    SetTranslationsStateStateRequest: {
      keyIds: (number)[];
      languageIds: (number)[];
      /** @enum {string} */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
    };
    SetKeysNamespaceRequest: {
      keyIds: (number)[];
      namespace?: string;
    };
    PreTranslationByTmRequest: {
      keyIds: (number)[];
      targetLanguageIds: (number)[];
    };
    MachineTranslationRequest: {
      keyIds: (number)[];
      targetLanguageIds: (number)[];
    };
    DeleteKeysRequest: {
      keyIds: (number)[];
    };
    CopyTranslationRequest: {
      keyIds: (number)[];
      /** Format: int64 */
      sourceLanguageId: number;
      targetLanguageIds: (number)[];
    };
    ClearTranslationsRequest: {
      keyIds: (number)[];
      languageIds: (number)[];
    };
    ErrorResponseBody: {
      code: string;
      params?: (Record<string, never>)[];
    };
    ImportAddFilesResultModel: {
      errors: (components["schemas"]["ErrorResponseBody"])[];
      result?: components["schemas"]["PagedModelImportLanguageModel"];
    };
    ImportLanguageModel: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      existingLanguageId?: number;
      existingLanguageTag?: string;
      existingLanguageAbbreviation?: string;
      existingLanguageName?: string;
      importFileName: string;
      /** Format: int64 */
      importFileId: number;
      /** Format: int32 */
      importFileIssueCount: number;
      namespace?: string;
      /** Format: int32 */
      totalCount: number;
      /** Format: int32 */
      conflictCount: number;
      /** Format: int32 */
      resolvedCount: number;
    };
    PageMetadata: {
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int64 */
      totalPages?: number;
      /** Format: int64 */
      number?: number;
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: (components["schemas"]["ImportLanguageModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ExportParams: {
      languages?: (string)[];
      /** @enum {string} */
      format: "JSON" | "XLIFF";
      structureDelimiter?: string;
      filterKeyId?: (number)[];
      filterKeyIdNot?: (number)[];
      filterTag?: string;
      filterKeyPrefix?: string;
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
      filterNamespace?: (string)[];
      zip: boolean;
    };
    StreamingResponseBody: Record<string, never>;
    BigMetaDto: {
      /** @description List of keys, visible, in order as they appear in the document. The order is important! We are using it for graph distance calculation. */
      relatedKeysInOrder: (components["schemas"]["RelatedKeyDto"])[];
    };
    /** @description List of keys, visible, in order as they appear in the document. The order is important! We are using it for graph distance calculation. */
    RelatedKeyDto: {
      namespace?: string;
      keyName: string;
    };
    TranslationCommentWithLangKeyDto: {
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      languageId: number;
      text: string;
      /** @enum {string} */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    TranslationWithCommentModel: {
      translation: components["schemas"]["TranslationModel"];
      comment: components["schemas"]["TranslationCommentModel"];
    };
    SuggestRequestDto: {
      /**
       * Format: int64 
       * @description Key Id to get results for. Use when key is stored already.
       */
      keyId: number;
      /** Format: int64 */
      targetLanguageId: number;
      /** @description Text value of base translation. Useful, when base translation is not stored yet. */
      baseText?: string;
      /** @description List of services to use. If null, then all enabled services are used. */
      services?: ("GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE")[];
    };
    PagedModelTranslationMemoryItemModel: {
      _embedded?: {
        translationMemoryItems?: (components["schemas"]["TranslationMemoryItemModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    TranslationMemoryItemModel: {
      targetText: string;
      baseText: string;
      keyName: string;
      /** Format: float */
      similarity: number;
    };
    SuggestResultModel: {
      /**
       * @deprecated 
       * @description String translations provided by enabled services. (deprecated, use `result` instead) 
       * @example 
       *     {
       *       "GOOGLE": "This was translated by Google",
       *       "TOLGEE": "This was translated by Tolgee Translator",
       *     }
       */
      machineTranslations?: {
        [key: string]: string | undefined;
      };
      /** Format: int64 */
      translationCreditsBalanceBefore: number;
      /** Format: int64 */
      translationCreditsBalanceAfter: number;
      /**
       * @description Results provided by enabled services. 
       * @example {
       *   "GOOGLE": {
       *     "output": "This was translated by Google",
       *     "contextDescription": null
       *   },
       *   "TOLGEE": {
       *     "output": "This was translated by Tolgee Translator",
       *     "contextDescription": "This is an example in swagger"
       *   }
       * }
       */
      result?: {
        [key: string]: components["schemas"]["TranslationItemModel"] | undefined;
      };
      /**
       * Format: int64 
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceBefore: number;
      /**
       * Format: int64 
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceAfter: number;
    };
    /**
     * @description Results provided by enabled services. 
     * @example {
     *   "GOOGLE": {
     *     "output": "This was translated by Google",
     *     "contextDescription": null
     *   },
     *   "TOLGEE": {
     *     "output": "This was translated by Tolgee Translator",
     *     "contextDescription": "This is an example in swagger"
     *   }
     * }
     */
    TranslationItemModel: {
      output: string;
      contextDescription?: string;
    };
    ScreenshotInfoDto: {
      text?: string;
      positions?: (components["schemas"]["KeyInScreenshotPositionDto"])[];
      location?: string;
    };
    CreatePatDto: {
      /** @description Description of the PAT */
      description: string;
      /**
       * Format: int64 
       * @description Expiration date in epoch format (milliseconds). When null, token never expires. 
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    ImageUploadInfoDto: {
      location?: string;
    };
    UploadedImageModel: {
      /** Format: int64 */
      id: number;
      filename: string;
      fileUrl: string;
      requestFilename: string;
      /** Format: date-time */
      createdAt: string;
      location?: string;
    };
    AverageProportionalUsageItemModel: {
      total: number;
      unusedQuantity: number;
      usedQuantity: number;
      usedQuantityOverPlan: number;
    };
    PlanIncludedUsageModel: {
      /** Format: int64 */
      seats: number;
      /** Format: int64 */
      translationSlots: number;
      /** Format: int64 */
      translations: number;
      /** Format: int64 */
      mtCredits: number;
    };
    PlanPricesModel: {
      perSeat: number;
      perThousandTranslations?: number;
      perThousandMtCredits?: number;
      subscriptionMonthly: number;
      subscriptionYearly: number;
    };
    PrepareSetEeLicenceKeyModel: {
      plan: components["schemas"]["SelfHostedEePlanModel"];
      usage: components["schemas"]["UsageModel"];
    };
    SelfHostedEePlanModel: {
      /** Format: int64 */
      id: number;
      name: string;
      public: boolean;
      enabledFeatures: ("GRANULAR_PERMISSIONS" | "PRIORITIZED_FEATURE_REQUESTS" | "PREMIUM_SUPPORT" | "DEDICATED_SLACK_CHANNEL" | "ASSISTED_UPDATES" | "DEPLOYMENT_ASSISTANCE" | "BACKUP_CONFIGURATION" | "TEAM_TRAINING" | "ACCOUNT_MANAGER" | "STANDARD_SUPPORT")[];
      prices: components["schemas"]["PlanPricesModel"];
      includedUsage: components["schemas"]["PlanIncludedUsageModel"];
      hasYearlyPrice: boolean;
    };
    SumUsageItemModel: {
      total: number;
      /** Format: int64 */
      unusedQuantity: number;
      /** Format: int64 */
      usedQuantity: number;
      /** Format: int64 */
      usedQuantityOverPlan: number;
    };
    UsageModel: {
      subscriptionPrice?: number;
      /** @description Relevant for invoices only. When there are applied stripe credits, we need to reduce the total price by this amount. */
      appliedStripeCredits?: number;
      seats: components["schemas"]["AverageProportionalUsageItemModel"];
      translations: components["schemas"]["AverageProportionalUsageItemModel"];
      credits?: components["schemas"]["SumUsageItemModel"];
      total: number;
    };
    CreateApiKeyDto: {
      /** Format: int64 */
      projectId: number;
      scopes: (string)[];
      /** @description Description of the project API key */
      description?: string;
      /**
       * Format: int64 
       * @description Expiration date in epoch format (milliseconds). When null key never expires. 
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    TextNode: Record<string, never>;
    SignUpDto: {
      name: string;
      email: string;
      organizationName?: string;
      password: string;
      invitationCode?: string;
      callbackUrl?: string;
      recaptchaToken?: string;
    };
    ResetPassword: {
      email: string;
      code: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email: string;
    };
    LoginRequest: {
      username: string;
      password: string;
      otp?: string;
    };
    CollectionModelSimpleOrganizationModel: {
      _embedded?: {
        organizations?: (components["schemas"]["SimpleOrganizationModel"])[];
      };
    };
    UserPreferencesModel: {
      language?: string;
      /** Format: int64 */
      preferredOrganizationId?: number;
    };
    HierarchyItem: {
      /** @enum {string} */
      scope: "translations.view" | "translations.edit" | "keys.edit" | "screenshots.upload" | "screenshots.delete" | "screenshots.view" | "activity.view" | "languages.edit" | "admin" | "project.edit" | "members.view" | "members.edit" | "translation-comments.add" | "translation-comments.edit" | "translation-comments.set-state" | "translations.state-edit" | "keys.view" | "keys.delete" | "keys.create" | "batch-jobs.view" | "batch-jobs.cancel" | "translations.batch-by-tm" | "translations.batch-machine";
      requires: (components["schemas"]["HierarchyItem"])[];
    };
    AnnouncementDto: {
      /** @enum {string} */
      type: "FEATURE_BATCH_OPERATIONS";
    };
    AuthMethodsDTO: {
      github: components["schemas"]["OAuthPublicConfigDTO"];
      google: components["schemas"]["OAuthPublicConfigDTO"];
      oauth2: components["schemas"]["OAuthPublicExtendsConfigDTO"];
    };
    InitialDataModel: {
      serverConfiguration: components["schemas"]["PublicConfigurationDTO"];
      userInfo?: components["schemas"]["PrivateUserAccountModel"];
      preferredOrganization?: components["schemas"]["PrivateOrganizationModel"];
      languageTag?: string;
      eeSubscription?: components["schemas"]["EeSubscriptionModel"];
      announcement?: components["schemas"]["AnnouncementDto"];
    };
    MtServiceDTO: {
      enabled: boolean;
      defaultEnabledForProject: boolean;
    };
    MtServicesDTO: {
      /** @enum {string} */
      defaultPrimaryService?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
      services: {
        [key: string]: components["schemas"]["MtServiceDTO"] | undefined;
      };
    };
    OAuthPublicConfigDTO: {
      clientId?: string;
      enabled: boolean;
    };
    OAuthPublicExtendsConfigDTO: {
      clientId?: string;
      authorizationUrl?: string;
      scopes?: (string)[];
      enabled: boolean;
    };
    PrivateOrganizationModel: {
      organizationModel?: components["schemas"]["OrganizationModel"];
      /** @example Features organization has enabled */
      enabledFeatures: ("GRANULAR_PERMISSIONS" | "PRIORITIZED_FEATURE_REQUESTS" | "PREMIUM_SUPPORT" | "DEDICATED_SLACK_CHANNEL" | "ASSISTED_UPDATES" | "DEPLOYMENT_ASSISTANCE" | "BACKUP_CONFIGURATION" | "TEAM_TRAINING" | "ACCOUNT_MANAGER" | "STANDARD_SUPPORT")[];
      /** @example Beautiful organization */
      name: string;
      /** Format: int64 */
      id: number;
      basePermissions: components["schemas"]["PermissionModel"];
      /** @example btforg */
      slug: string;
      avatar?: components["schemas"]["Avatar"];
      /**
       * @description The role of currently authorized user. 
       *     
       * Can be null when user has direct access to one of the projects owned by the organization. 
       * @enum {string}
       */
      currentUserRole?: "MEMBER" | "OWNER";
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
    };
    PublicBillingConfigurationDTO: {
      enabled: boolean;
    };
    PublicConfigurationDTO: {
      machineTranslationServices: components["schemas"]["MtServicesDTO"];
      billing: components["schemas"]["PublicBillingConfigurationDTO"];
      version: string;
      authentication: boolean;
      authMethods?: components["schemas"]["AuthMethodsDTO"];
      passwordResettable: boolean;
      allowRegistrations: boolean;
      screenshotsUrl: string;
      /** Format: int32 */
      maxUploadFileSize: number;
      clientSentryDsn?: string;
      needsEmailVerification: boolean;
      userCanCreateOrganizations: boolean;
      appName: string;
      showVersion: boolean;
      internalControllerEnabled: boolean;
      /** Format: int64 */
      maxTranslationTextLength: number;
      recaptchaSiteKey?: string;
      chatwootToken?: string;
      capterraTracker?: string;
      ga4Tag?: string;
      postHogApiKey?: string;
      postHogHost?: string;
    };
    DocItem: {
      name: string;
      displayName?: string;
      description?: string;
    };
    PagedModelProjectModel: {
      _embedded?: {
        projects?: (components["schemas"]["ProjectModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelUserAccountInProjectModel: {
      _embedded?: {
        users?: (components["schemas"]["UserAccountInProjectModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserAccountInProjectModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      /** @enum {string} */
      organizationRole?: "MEMBER" | "OWNER";
      organizationBasePermission: components["schemas"]["PermissionModel"];
      directPermission?: components["schemas"]["PermissionModel"];
      computedPermission: components["schemas"]["ComputedPermissionModel"];
    };
    CollectionModelUsedNamespaceModel: {
      _embedded?: {
        namespaces?: (components["schemas"]["UsedNamespaceModel"])[];
      };
    };
    UsedNamespaceModel: {
      /**
       * Format: int64 
       * @description The id of namespace. Null for default namespace. 
       * @example 10000048
       */
      id?: number;
      /**
       * @description Name of namespace. Null if default. 
       * @example homepage
       */
      name?: string;
    };
    PagedModelTagModel: {
      _embedded?: {
        tags?: (components["schemas"]["TagModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelNamespaceModel: {
      _embedded?: {
        namespaces?: (components["schemas"]["NamespaceModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CreditBalanceModel: {
      /** Format: int64 */
      creditBalance: number;
      /** Format: int64 */
      bucketSize: number;
      /** Format: int64 */
      extraCreditBalance: number;
    };
    KeySearchResultView: {
      name: string;
      /** Format: int64 */
      id: number;
      baseTranslation?: string;
      translation?: string;
      namespace?: string;
    };
    KeySearchSearchResultModel: {
      view?: components["schemas"]["KeySearchResultView"];
      name: string;
      /** Format: int64 */
      id: number;
      baseTranslation?: string;
      translation?: string;
      namespace?: string;
    };
    PagedModelKeySearchSearchResultModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeySearchSearchResultModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelKeyModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeyModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelKeyModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeyModel"])[];
      };
    };
    EntityDescriptionWithRelations: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    ExistenceEntityDescription: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: {
        [key: string]: Record<string, never> | undefined;
      };
      relations: {
        [key: string]: components["schemas"]["EntityDescriptionWithRelations"] | undefined;
      };
      exists?: boolean;
    };
    ModifiedEntityModel: {
      /** Format: int64 */
      entityId: number;
      description?: {
        [key: string]: Record<string, never> | undefined;
      };
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"] | undefined;
      };
      relations?: {
        [key: string]: components["schemas"]["ExistenceEntityDescription"] | undefined;
      };
      exists?: boolean;
    };
    PagedModelProjectActivityModel: {
      _embedded?: {
        activities?: (components["schemas"]["ProjectActivityModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ProjectActivityAuthorModel: {
      /** Format: int64 */
      id: number;
      username?: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
    };
    ProjectActivityModel: {
      /** Format: int64 */
      revisionId: number;
      /** Format: int64 */
      timestamp: number;
      /** @enum {string} */
      type: "UNKNOWN" | "SET_TRANSLATION_STATE" | "SET_TRANSLATIONS" | "DISMISS_AUTO_TRANSLATED_STATE" | "SET_OUTDATED_FLAG" | "TRANSLATION_COMMENT_ADD" | "TRANSLATION_COMMENT_DELETE" | "TRANSLATION_COMMENT_EDIT" | "TRANSLATION_COMMENT_SET_STATE" | "SCREENSHOT_DELETE" | "SCREENSHOT_ADD" | "KEY_TAGS_EDIT" | "KEY_NAME_EDIT" | "KEY_DELETE" | "CREATE_KEY" | "COMPLEX_EDIT" | "IMPORT" | "CREATE_LANGUAGE" | "EDIT_LANGUAGE" | "DELETE_LANGUAGE" | "CREATE_PROJECT" | "EDIT_PROJECT" | "NAMESPACE_EDIT" | "BATCH_PRE_TRANSLATE_BY_TM" | "BATCH_MACHINE_TRANSLATE" | "AUTO_TRANSLATE" | "BATCH_CLEAR_TRANSLATIONS" | "BATCH_COPY_TRANSLATIONS" | "BATCH_SET_TRANSLATION_STATE" | "BATCH_TAG_KEYS" | "BATCH_UNTAG_KEYS" | "BATCH_SET_KEYS_NAMESPACE";
      author?: components["schemas"]["ProjectActivityAuthorModel"];
      modifiedEntities?: {
        [key: string]: (components["schemas"]["ModifiedEntityModel"])[] | undefined;
      };
      meta?: {
        [key: string]: Record<string, never> | undefined;
      };
      counts?: {
        [key: string]: number | undefined;
      };
      params?: Record<string, never>;
    };
    PropertyModification: {
      old?: Record<string, never>;
      new?: Record<string, never>;
    };
    PagedModelBatchJobModel: {
      _embedded?: {
        batchJobs?: (components["schemas"]["BatchJobModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ImportTranslationModel: {
      /** Format: int64 */
      id: number;
      text?: string;
      keyName: string;
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      conflictId?: number;
      conflictText?: string;
      override: boolean;
      resolved: boolean;
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: (components["schemas"]["ImportTranslationModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    EntityModelImportFileIssueView: {
      /** Format: int64 */
      id: number;
      /** @enum {string} */
      type: "KEY_IS_NOT_STRING" | "MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE" | "VALUE_IS_NOT_STRING" | "KEY_IS_EMPTY" | "VALUE_IS_EMPTY" | "PO_MSGCTXT_NOT_SUPPORTED" | "ID_ATTRIBUTE_NOT_PROVIDED" | "TARGET_NOT_PROVIDED" | "TRANSLATION_TOO_LONG";
      params: (components["schemas"]["ImportFileIssueParamView"])[];
    };
    ImportFileIssueParamView: {
      value?: string;
      /** @enum {string} */
      type: "KEY_NAME" | "KEY_ID" | "LANGUAGE_ID" | "KEY_INDEX" | "VALUE" | "LINE" | "FILE_NODE_ORIGINAL";
    };
    PagedModelEntityModelImportFileIssueView: {
      _embedded?: {
        importFileIssueViews?: (components["schemas"]["EntityModelImportFileIssueView"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelImportNamespaceModel: {
      _embedded?: {
        namespaces?: (components["schemas"]["ImportNamespaceModel"])[];
      };
    };
    ImportNamespaceModel: {
      /**
       * Format: int64 
       * @description The id of namespace. When null, namespace doesn't exist and will be created by import. 
       * @example 10000048
       */
      id?: number;
      /** @example homepage */
      name: string;
    };
    CollectionModelBatchJobModel: {
      _embedded?: {
        batchJobs?: (components["schemas"]["BatchJobModel"])[];
      };
    };
    PagedModelTranslationCommentModel: {
      _embedded?: {
        translationComments?: (components["schemas"]["TranslationCommentModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationHistoryModel: {
      _embedded?: {
        revisions?: (components["schemas"]["TranslationHistoryModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    TranslationHistoryModel: {
      /** @description Modified fields */
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"] | undefined;
      };
      /**
       * Format: int64 
       * @description Unix timestamp of the revision
       */
      timestamp: number;
      author?: components["schemas"]["SimpleUserAccountModel"];
      /** @enum {string} */
      revisionType: "ADD" | "MOD" | "DEL";
    };
    SelectAllResponse: {
      ids: (number)[];
    };
    KeyWithTranslationsModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * Format: int64 
       * @description The namespace id of the key 
       * @example 100000282
       */
      keyNamespaceId?: number;
      /**
       * @description The namespace of the key 
       * @example homepage
       */
      keyNamespace?: string;
      /** @description Tags of key */
      keyTags: (components["schemas"]["TagModel"])[];
      /**
       * Format: int64 
       * @description Count of screenshots provided for the key 
       * @example 1
       */
      screenshotCount: number;
      /** @description Key screenshots. Not provided when API key hasn't screenshots.view scope permission. */
      screenshots?: (components["schemas"]["ScreenshotModel"])[];
      /** @description There is a context available for this key */
      contextPresent: boolean;
      /**
       * @description Translations object 
       * @example 
       *     {
       *       "en": {
       *         "id": 100000003, 
       *         "text": "This is super translation!"
       *         "state": "TRANSLATED",
       *         "commentCount": 1
       *       }
       *     }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationViewModel"] | undefined;
      };
    };
    KeysWithTranslationsPageModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeyWithTranslationsModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
      /** @description Provided languages data */
      selectedLanguages: (components["schemas"]["LanguageModel"])[];
      /**
       * @description Cursor to get next data 
       * @example eyJrZXlJZCI6eyJkaXJlY3Rpb24iOiJBU0MiLCJ2YWx1ZSI6IjEwMDAwMDAxMjAifX0=
       */
      nextCursor?: string;
    };
    /**
     * @description Translations object 
     * @example 
     *     {
     *       "en": {
     *         "id": 100000003, 
     *         "text": "This is super translation!"
     *         "state": "TRANSLATED",
     *         "commentCount": 1
     *       }
     *     }
     */
    TranslationViewModel: {
      /**
       * Format: int64 
       * @description Id of translation record
       */
      id: number;
      /** @description Translation text */
      text?: string;
      /**
       * @description State of translation 
       * @enum {string}
       */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** @description Whether base language translation was changed after this translation was updated */
      outdated: boolean;
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * @description Which machine translation service was used to auto translate this 
       * @enum {string}
       */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
      /**
       * Format: int64 
       * @description Count of translation comments
       */
      commentCount: number;
      /**
       * Format: int64 
       * @description Count of unresolved translation comments
       */
      unresolvedCommentCount: number;
      /** @description Was translation memory used to translate this? */
      fromTranslationMemory: boolean;
    };
    CollectionModelProjectTransferOptionModel: {
      _embedded?: {
        transferOptions?: (components["schemas"]["ProjectTransferOptionModel"])[];
      };
    };
    ProjectTransferOptionModel: {
      name: string;
      slug: string;
      /** Format: int64 */
      id: number;
    };
    LanguageStatsModel: {
      /** Format: int64 */
      languageId?: number;
      languageTag?: string;
      languageName?: string;
      languageOriginalName?: string;
      languageFlagEmoji?: string;
      /** Format: int64 */
      translatedKeyCount: number;
      /** Format: int64 */
      translatedWordCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: int64 */
      reviewedKeyCount: number;
      /** Format: int64 */
      reviewedWordCount: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      untranslatedKeyCount: number;
      /** Format: int64 */
      untranslatedWordCount: number;
      /** Format: double */
      untranslatedPercentage: number;
    };
    ProjectStatsModel: {
      /** Format: int64 */
      projectId: number;
      /** Format: int32 */
      languageCount: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      baseWordsCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      membersCount: number;
      /** Format: int64 */
      tagCount: number;
      languageStats: (components["schemas"]["LanguageStatsModel"])[];
    };
    PagedModelLanguageModel: {
      _embedded?: {
        languages?: (components["schemas"]["LanguageModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelProjectInvitationModel: {
      _embedded?: {
        invitations?: (components["schemas"]["ProjectInvitationModel"])[];
      };
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: (string)[];
    };
    PagedModelApiKeyModel: {
      _embedded?: {
        apiKeys?: (components["schemas"]["ApiKeyModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelProjectWithStatsModel: {
      _embedded?: {
        projects?: (components["schemas"]["ProjectWithStatsModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ProjectStatistics: {
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      languageCount: number;
      translationStatePercentages: {
        [key: string]: number | undefined;
      };
    };
    ProjectWithStatsModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      organizationOwner?: components["schemas"]["SimpleOrganizationModel"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      /** @enum {string} */
      organizationRole?: "MEMBER" | "OWNER";
      directPermission?: components["schemas"]["PermissionModel"];
      computedPermission: components["schemas"]["ComputedPermissionModel"];
      stats: components["schemas"]["ProjectStatistics"];
      languages: (components["schemas"]["LanguageModel"])[];
    };
    CollectionModelScreenshotModel: {
      _embedded?: {
        screenshots?: (components["schemas"]["ScreenshotModel"])[];
      };
    };
    PagedModelPatModel: {
      _embedded?: {
        pats?: (components["schemas"]["PatModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PatWithUserModel: {
      user: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    OrganizationRequestParamsDto: {
      filterCurrentUserOwner: boolean;
      search?: string;
    };
    PagedModelOrganizationModel: {
      _embedded?: {
        organizations?: (components["schemas"]["OrganizationModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: (components["schemas"]["OrganizationInvitationModel"])[];
      };
    };
    PublicUsageModel: {
      /** Format: int64 */
      organizationId: number;
      /**
       * Format: int64 
       * @description Current balance of standard credits. Standard credits are refilled every month
       */
      creditBalance: number;
      /**
       * Format: int64 
       * @description How many credits are included in your current plan
       */
      includedMtCredits: number;
      /**
       * Format: int64 
       * @description Date when credits were refilled. (In epoch format)
       */
      creditBalanceRefilledAt: number;
      /**
       * Format: int64 
       * @description Date when credits will be refilled. (In epoch format)
       */
      creditBalanceNextRefillAt: number;
      /**
       * Format: int64 
       * @description Currently used credits over credits included in plan and extra credits
       */
      currentPayAsYouGoMtCredits: number;
      /**
       * Format: int64 
       * @description The maximum amount organization can spend on MT credit usage before they reach the spending limit
       */
      availablePayAsYouGoMtCredits: number;
      /**
       * Format: int64 
       * @description Extra credits, which are neither refilled nor reset every month. These credits are used when there are no standard credits
       */
      extraCreditBalance: number;
      /**
       * Format: int64 
       * @description How many translations can be stored within your organization
       */
      translationSlotsLimit: number;
      /**
       * Format: int64 
       * @description How many translation slots are included in current subscription plan. How many translation slots can organization use without additional costs
       */
      includedTranslationSlots: number;
      /**
       * Format: int64 
       * @description How many translations are included in current subscription plan. How many translations can organization use without additional costs
       */
      includedTranslations: number;
      /**
       * Format: int64 
       * @description How many translations slots are currently used by organization
       */
      currentTranslationSlots: number;
      /**
       * Format: int64 
       * @description How many non-empty translations are currently stored by organization
       */
      currentTranslations: number;
      /**
       * Format: int64 
       * @description How many translations can be stored until reaching the limit. (For pay us you go, the top limit is the spending limit)
       */
      translationsLimit: number;
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: (components["schemas"]["UserAccountWithOrganizationRoleModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    SimpleProjectModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      baseLanguage?: components["schemas"]["LanguageModel"];
    };
    UserAccountWithOrganizationRoleModel: {
      /** Format: int64 */
      id: number;
      name: string;
      username: string;
      /** @enum {string} */
      organizationRole?: "MEMBER" | "OWNER";
      projectsWithDirectPermission: (components["schemas"]["SimpleProjectModel"])[];
      avatar?: components["schemas"]["Avatar"];
    };
    ApiKeyWithLanguagesModel: {
      /**
       * @description Languages for which user has translate permission.
       * 
       * If null, all languages are permitted.
       */
      permittedLanguageIds?: (number)[];
      /** Format: int64 */
      id: number;
      userFullName?: string;
      projectName: string;
      scopes: (string)[];
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      projectId: number;
      username?: string;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    PagedModelUserAccountModel: {
      _embedded?: {
        users?: (components["schemas"]["UserAccountModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserTotpDisableRequestDto: {
      password: string;
    };
    DeleteKeysDto: {
      /** @description IDs of keys to delete */
      ids: (number)[];
    };
    Link: {
      href?: string;
      hreflang?: string;
      title?: string;
      type?: string;
      deprecation?: string;
      profile?: string;
      name?: string;
      templated?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  update_1: {
    /** Update namespace */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNamespaceDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  tagKey_1: {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TagModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  complexEdit_1: {
    /** More */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComplexEditKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  edit_1: {
    /** Edits key name */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetOverride_1: {
    /**
     * Resolve conflict (override) 
     * @description Resolves translation conflict. The old translation will be overridden.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting_1: {
    /**
     * Resolve conflict (keep existing) 
     * @description Resolves translation conflict. The old translation will be kept.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetOverride_3: {
    /**
     * Resolve all translation conflicts (override) 
     * @description Resolves all translation conflicts for provided language. The old translations will be overridden.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting_3: {
    /**
     * Resolve all translation conflicts (keep existing) 
     * @description Resolves all translation conflicts for provided language. The old translations will be kept.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  selectExistingLanguage_1: {
    /**
     * Pair existing language 
     * @description Sets existing language to pair with language to import. Data will be imported to selected existing language when applied.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        importLanguageId: number;
        existingLanguageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resetExistingLanguage_1: {
    /**
     * Reset existing language pairing 
     * @description Resets existing language paired with language to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        importLanguageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  selectNamespace_1: {
    /**
     * Select namespace 
     * @description Sets namespace for file to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        fileId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetFileNamespaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  applyImport_1: {
    /**
     * Apply 
     * @description Imports the data prepared in previous step
     */
    parameters?: {
        /** @description Whether override or keep all translations with unresolved conflicts */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        forceMode?: "OVERRIDE" | "KEEP" | "NO_FORCE";
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  cancel_1: {
    /** Stops batch operation (if possible) */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslationState_1: {
    /** Sets translation state */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
        state: "TRANSLATED" | "REVIEWED";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setState_1: {
    /** Sets state of translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        commentId: number;
        state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_7: {
    /** Returns single translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_3: {
    /** Updates single translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_6: {
    /** Deletes the translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setOutdated_1: {
    /** Set's "outdated" indication */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
        state: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  dismissAutoTranslatedState_1: {
    /** Removes "auto translated" indication */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslations_1: {
    /** Returns translations in project */
    parameters?: {
        /** @description Cursor to get next data */
        /**
         * @description Translation state in the format: languageTag,state. You can use this parameter multiple times.
         * 
         * When used with multiple states for same language it is applied with logical OR. 
         *  
         * When used with multiple languages, it is applied with logical AND.
         */
        /**
         * @description Languages to be contained in response.
         *                 
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de) 
         * @example en
         */
        /** @description String to search in key name or translation text */
        /** @description Selects key with provided names. Use this param multiple times to fetch more keys. */
        /** @description Selects key with provided ID. Use this param multiple times to fetch more keys. */
        /** @description Selects only keys, where translation is missing in any language */
        /** @description Selects only keys, where translation is provided in any language */
        /**
         * @description Selects only keys, where translation is missing in specified language 
         * @example en-US
         */
        /**
         * @description Selects only keys, where translation is provided in specified language 
         * @example en-US
         */
        /** @description Selects only keys with screenshots */
        /** @description Selects only keys without screenshots */
        /**
         * @description Filter namespaces. 
         * 
         * To filter default namespace, set to empty string.
         */
        /** @description Selects only keys with provided tag */
        /**
         * @description Selects only keys, where translation in provided langs is in outdated state 
         * @example en-US
         */
        /**
         * @description Selects only keys, where translation in provided langs is not in outdated state 
         * @example en-US
         */
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        cursor?: string;
        filterState?: (string)[];
        languages?: (string)[];
        search?: string;
        filterKeyName?: (string)[];
        filterKeyId?: (number)[];
        filterUntranslatedAny?: boolean;
        filterTranslatedAny?: boolean;
        filterUntranslatedInLang?: string;
        filterTranslatedInLang?: string;
        filterHasScreenshot?: boolean;
        filterHasNoScreenshot?: boolean;
        filterNamespace?: (string)[];
        filterTag?: (string)[];
        filterOutdatedLanguage?: (string)[];
        filterNotOutdatedLanguage?: (string)[];
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeysWithTranslationsPageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslations_1: {
    /** Sets translations for existing key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createOrUpdateTranslations_1: {
    /** Sets translations for existing or not existing key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  editLanguage_1: {
    /** Edits language */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteLanguage_3: {
    /** Deletes specific language */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  autoTranslate_1: {
    /**
     * Auto translates keys 
     * @description Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     * 
     * This will replace the the existing translation with the result obtained from specified source!
     */
    parameters: {
        /**
         * @description Tags of languages to auto-translate. 
         * When no languages provided, it translates only untranslated languages.
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        languages?: (string)[];
        useMachineTranslation?: boolean;
        useTranslationMemory?: boolean;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getInfo_1: {
    /** Returns information about keys. (KeyData, Screenshots, Translation in specified language)If key is not found, it's not included in the response. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetKeysRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelKeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  importKeys_1: {
    /** Import's new keys with translations. Translations can be updated, when specified. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysResolvableDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyImportResolvableResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  importKeys_3: {
    /** Imports new keys with translations. If key already exists, its translations and tags are not updated. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysDto"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_2: {
    /** Creates new key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_4: {
    /** Returns all keys in the project */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelKeyModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_3: {
    /** Creates new key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_4: {
    /** Deletes one or multiple keys by their IDs in request body */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteKeysDto"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  untagKeys_1: {
    /** Remove tags */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UntagKeysRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  tagKeys_1: {
    /** Add tags */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeysRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslationState_3: {
    /** Set translation state */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsStateStateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setKeysNamespace_1: {
    /** Set keys namespace */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetKeysNamespaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  translate_1: {
    /**
     * Pre-translate by TM 
     * @description Pre-translate provided keys to provided languages by TM.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PreTranslationByTmRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  machineTranslation_1: {
    /**
     * Machine Translation 
     * @description Translate provided keys to provided languages through primary MT provider.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MachineTranslationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteKeys_1: {
    /** Delete keys */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteKeysRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  copyTranslations_1: {
    /**
     * Copy translation values 
     * @description Copy translation values from one language to other languages.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CopyTranslationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  clearTranslations_1: {
    /**
     * Clear translation values 
     * @description Clear translation values for provided keys in selected languages.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClearTranslationsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  addFiles_1: {
    /**
     * Add files 
     * @description Prepares provided files to import.
     */
    parameters?: {
        /** @description When importing structured JSONs, you can set the delimiter which will be used in names of improted keys. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        structureDelimiter?: string;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          files: (string)[];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportAddFilesResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  cancelImport_1: {
    /**
     * Delete 
     * @description Deletes prepared import data.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  export_1: {
    /** Exports data */
    parameters?: {
        /**
         * @description Languages to be contained in export.
         *                 
         * If null, all languages are exported 
         * @example en
         */
        /** @description Format to export to */
        /**
         * @description Delimiter to structure file content. 
         * 
         * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
         * 
         * When null, resulting file won't be structured.
         */
        /** @description Filter key IDs to be contained in export */
        /** @description Filter key IDs not to be contained in export */
        /** @description Filter keys tagged by */
        /** @description Filter keys with prefix */
        /** @description Filter translations with state. By default, everything except untranslated is exported. */
        /** @description Select one ore multiple namespaces to export */
        /**
         * @description If false, it doesn't return zip of files, but it returns single file.
         *       
         * This is possible only when single language is exported. Otherwise it returns "400 - Bad Request" response.
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        languages?: (string)[];
        format?: "JSON" | "XLIFF";
        structureDelimiter?: string;
        filterKeyId?: (number)[];
        filterKeyIdNot?: (number)[];
        filterTag?: string;
        filterKeyPrefix?: string;
        filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
        filterNamespace?: (string)[];
        zip?: boolean;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  exportPost_1: {
    /** Exports data (post). Useful when providing params exceeding allowed query size. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportParams"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  store_1: {
    /** Stores a bigMeta for a project */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BigMetaDto"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_6: {
    /** Returns translation comments of translation */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_5: {
    /** Creates a translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_7: {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentWithLangKeyDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationWithCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  suggestTranslationMemory_1: {
    /**
     * Suggests machine translations from translation memory.
     * 
     * The result is always sorted by similarity, so sorting is not supported.
     */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationMemoryItemModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  suggestMachineTranslations_1: {
    /** Suggests machine translations from enabled services */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_8: {
    /** Returns all project languages */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelLanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createLanguage_1: {
    /** Creates language */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getKeyScreenshots: {
    /** Returns all screenshots for specified key */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelScreenshotModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadScreenshot: {
    /** Upload screenshot for specific key */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          screenshot: string;
          info?: components["schemas"]["ScreenshotInfoDto"];
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["ScreenshotModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  upload: {
    /** Uploads an image for later use */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image: string;
          info?: components["schemas"]["ImageUploadInfoDto"];
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["UploadedImageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getUsedNamespaces_1: {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelUsedNamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_2: {
    /** Returns project tags */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        search?: string;
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTagModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllNamespaces_1: {
    /** Returns all project namespaces */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelNamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getByName_1: {
    /** Update namespace */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchForKey_1: {
    /** This endpoint helps you to find desired key by keyName, base translation or translation in specified language. */
    parameters: {
        /** @description Search query */
        /** @description Language to search in */
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query: {
        search: string;
        languageTag?: string;
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelKeySearchSearchResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getActivity_1: {
    /** Returns project history */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelProjectActivityModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  myList_1: {
    /** Lists all batch operations in project started by current user */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelBatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportTranslations_1: {
    /**
     * Get translations 
     * @description Returns translations prepared to import.
     */
    parameters: {
        /** @description Whether only translations, which are in conflict with existing translations should be returned */
        /** @description Whether only translations with unresolved conflictswith existing translations should be returned */
        /** @description String to search in translation text or key */
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        onlyConflicts?: boolean;
        onlyUnresolved?: boolean;
        search?: string;
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportTranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportLanguage_1: {
    /**
     * Get import language 
     * @description Returns language prepared to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportLanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteLanguage_1: {
    /**
     * Delete language 
     * @description Deletes language prepared to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportFileIssues_1: {
    /**
     * Get file issues 
     * @description Returns issues for uploaded file.
     */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        importFileId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelEntityModelImportFileIssueView"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportResult_1: {
    /**
     * Get result 
     * @description Returns the result of preparation.
     */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportLanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllNamespaces_3: {
    /**
     * Get namespaces 
     * @description Returns all existing and imported namespaces
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelImportNamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  currentJobs_1: {
    /**
     * Returns all running and pending batch operations 
     * @description Completed batch operations are returned only if they are not older than 1 hour. If user doesn't have permission to view all batch operations, only their operations are returned.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelBatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_5: {
    /** Returns batch operation */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  list_1: {
    /** Lists all batch operations in project */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelBatchJobModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslationHistory_1: {
    /**
     * Returns history of specific translation. 
     * 
     * Sorting is not supported for supported. It is automatically sorted from newest to oldest.
     */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationHistoryModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllTranslations_1: {
    /** Returns all translations for specified languages */
    parameters: {
        /** @description Namespace to return */
        /**
         * @description Delimiter to structure response content. 
         * 
         * e.g. For key "home.header.title" would result in {"home": {"header": {"title": "Hello"}}} structure.
         * 
         * When null, resulting file will be a flat key-value object.
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ns?: string;
        structureDelimiter?: string;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
        /**
         * @description Comma-separated language tags to return translations in. 
         * @example en,de,fr
         */
      path: {
        languages: (string)[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getSelectAllKeyIds_1: {
    /** Get select all keys */
    parameters?: {
        /**
         * @description Translation state in the format: languageTag,state. You can use this parameter multiple times.
         * 
         * When used with multiple states for same language it is applied with logical OR. 
         *  
         * When used with multiple languages, it is applied with logical AND.
         */
        /**
         * @description Languages to be contained in response.
         *                 
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de) 
         * @example en
         */
        /** @description String to search in key name or translation text */
        /** @description Selects key with provided names. Use this param multiple times to fetch more keys. */
        /** @description Selects key with provided ID. Use this param multiple times to fetch more keys. */
        /** @description Selects only keys, where translation is missing in any language */
        /** @description Selects only keys, where translation is provided in any language */
        /**
         * @description Selects only keys, where translation is missing in specified language 
         * @example en-US
         */
        /**
         * @description Selects only keys, where translation is provided in specified language 
         * @example en-US
         */
        /** @description Selects only keys with screenshots */
        /** @description Selects only keys without screenshots */
        /**
         * @description Filter namespaces. 
         * 
         * To filter default namespace, set to empty string.
         */
        /** @description Selects only keys with provided tag */
        /**
         * @description Selects only keys, where translation in provided langs is in outdated state 
         * @example en-US
         */
        /**
         * @description Selects only keys, where translation in provided langs is not in outdated state 
         * @example en-US
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        filterState?: (string)[];
        languages?: (string)[];
        search?: string;
        filterKeyName?: (string)[];
        filterKeyId?: (number)[];
        filterUntranslatedAny?: boolean;
        filterTranslatedAny?: boolean;
        filterUntranslatedInLang?: string;
        filterTranslatedInLang?: string;
        filterHasScreenshot?: boolean;
        filterHasNoScreenshot?: boolean;
        filterNamespace?: (string)[];
        filterTag?: (string)[];
        filterOutdatedLanguage?: (string)[];
        filterNotOutdatedLanguage?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SelectAllResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectDailyActivity_1: {
    /** Returns project daily amount of events */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/hal+json": {
            [key: string]: number | undefined;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectStats_1: {
    /** Returns project stats */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["ProjectStatsModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCurrent_1: {
    /** Returns current API key info */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyWithLanguagesModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  doExportJsonZip_1: {
    /**
     * Exports data as ZIP of jsons 
     * @deprecated
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeTag_1: {
    /** Removes tag with provided id from key with provided id */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
        tagId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_2: {
    /** Deletes one or multiple keys by their IDs */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        ids: (number)[];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteScreenshots: {
    /** Deletes multiple screenshots by ids */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        ids: (number)[];
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_9: {
    /** Deletes uploaded images */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        ids: (number)[];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
