/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v2/projects/namespaces/{id}": {
    /** Update namespace */
    put: operations["update_1"];
  };
  "/v2/projects/keys/{keyId}/tags": {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    put: operations["tagKey_1"];
  };
  "/v2/projects/keys/{id}/complex-update": {
    /** More */
    put: operations["complexEdit_1"];
  };
  "/v2/projects/keys/{id}": {
    /** Edits key name */
    put: operations["edit_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override": {
    /**
     * Resolve conflict (override) 
     * @description Resolves translation conflict. The old translation will be overridden.
     */
    put: operations["resolveTranslationSetOverride_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing": {
    /**
     * Resolve conflict (keep existing) 
     * @description Resolves translation conflict. The old translation will be kept.
     */
    put: operations["resolveTranslationSetKeepExisting_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/resolve-all/set-override": {
    /**
     * Resolve all translation conflicts (override) 
     * @description Resolves all translation conflicts for provided language. The old translations will be overridden.
     */
    put: operations["resolveTranslationSetOverride_3"];
  };
  "/v2/projects/import/result/languages/{languageId}/resolve-all/set-keep-existing": {
    /**
     * Resolve all translation conflicts (keep existing) 
     * @description Resolves all translation conflicts for provided language. The old translations will be kept.
     */
    put: operations["resolveTranslationSetKeepExisting_3"];
  };
  "/v2/projects/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}": {
    /**
     * Pair existing language 
     * @description Sets existing language to pair with language to import. Data will be imported to selected existing language when applied.
     */
    put: operations["selectExistingLanguage_1"];
  };
  "/v2/projects/import/result/languages/{importLanguageId}/reset-existing": {
    /**
     * Reset existing language pairing 
     * @description Resets existing language paired with language to import.
     */
    put: operations["resetExistingLanguage_1"];
  };
  "/v2/projects/import/result/files/{fileId}/select-namespace": {
    /**
     * Select namespace 
     * @description Sets namespace for file to import.
     */
    put: operations["selectNamespace_1"];
  };
  "/v2/projects/import/apply": {
    /**
     * Apply 
     * @description Imports the data prepared in previous step
     */
    put: operations["applyImport_1"];
  };
  "/v2/projects/translations/{translationId}/set-state/{state}": {
    /** Sets translation state */
    put: operations["setTranslationState_1"];
  };
  "/v2/projects/translations/{translationId}/comments/{commentId}/set-state/{state}": {
    /** Sets state of translation comment */
    put: operations["setState_1"];
  };
  "/v2/projects/translations/{translationId}/comments/{commentId}": {
    /** Returns single translation comment */
    get: operations["get_4"];
    /** Updates single translation comment */
    put: operations["update_3"];
    /** Deletes the translation comment */
    delete: operations["delete_6"];
  };
  "/v2/projects/translations/{translationId}/dismiss-auto-translated-state": {
    /** Removes "auto translated" indication */
    put: operations["dismissAutoTranslatedState_1"];
  };
  "/v2/projects/translations": {
    /** Returns translations in project */
    get: operations["getTranslations_1"];
    /** Sets translations for existing key */
    put: operations["setTranslations_1"];
    /** Sets translations for existing or not existing key */
    post: operations["createOrUpdateTranslations_1"];
  };
  "/v2/projects/languages/{languageId}": {
    /** Edits language */
    put: operations["editLanguage_1"];
    /** Deletes specific language */
    delete: operations["deleteLanguage_3"];
  };
  "/v2/projects/keys/{keyId}/auto-translate": {
    /**
     * Auto translates keys 
     * @description Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     * 
     * This will replace the the existing translation with the result obtained from specified source!
     */
    put: operations["autoTranslate_1"];
  };
  "/v2/projects/keys/info": {
    /** Returns information about keys. (KeyData, Screenshots, Translation in specified language)If key is not found, it's not included in the response. */
    post: operations["getInfo_1"];
  };
  "/v2/projects/keys/import-resolvable": {
    /** Import's new keys with translations. Translations can be updated, when specified. */
    post: operations["importKeys_1"];
  };
  "/v2/projects/keys/import": {
    /** Import's new keys with translations. If key already exists, it's translations are not updated. */
    post: operations["importKeys_3"];
  };
  "/v2/projects/keys/create": {
    /** Creates new key */
    post: operations["create_2"];
  };
  "/v2/projects/keys": {
    /** Creates new key */
    post: operations["create_3"];
    /** Deletes one or multiple keys by their IDs in request body */
    delete: operations["delete_4"];
  };
  "/v2/projects/import": {
    /**
     * Add files 
     * @description Prepares provided files to import.
     */
    post: operations["addFiles_1"];
    /**
     * Delete 
     * @description Deletes prepared import data.
     */
    delete: operations["cancelImport_1"];
  };
  "/v2/projects/export": {
    /** Exports data */
    get: operations["export_1"];
    /** Exports data (post). Useful when providing params exceeding allowed query size. */
    post: operations["exportPost_1"];
  };
  "/v2/projects/translations/{translationId}/comments": {
    /** Returns translation comments of translation */
    get: operations["getAll_4"];
    /** Creates a translation comment */
    post: operations["create_5"];
  };
  "/v2/projects/translations/create-comment": {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    post: operations["create_7"];
  };
  "/v2/projects/suggest/translation-memory": {
    /**
     * Suggests machine translations from translation memory.
     * 
     * The result is always sorted by similarity, so sorting is not supported.
     */
    post: operations["suggestTranslationMemory_1"];
  };
  "/v2/projects/suggest/machine-translations": {
    /** Suggests machine translations from enabled services */
    post: operations["suggestMachineTranslations_1"];
  };
  "/v2/projects/languages": {
    /** Returns all project languages */
    get: operations["getAll_6"];
    /** Creates language */
    post: operations["createLanguage_1"];
  };
  "/v2/projects/keys/{keyId}/screenshots": {
    /** Returns all screenshots for specified key */
    get: operations["getKeyScreenshots"];
    /** Upload screenshot for specific key */
    post: operations["uploadScreenshot"];
  };
  "/v2/image-upload": {
    /** Uploads an image for later use */
    post: operations["upload"];
  };
  "/v2/projects/used-namespaces": {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    get: operations["getUsedNamespaces_1"];
  };
  "/v2/projects/tags": {
    /** Returns project tags */
    get: operations["getAll_2"];
  };
  "/v2/projects/namespaces": {
    /** Returns all project namespaces */
    get: operations["getAllNamespaces_1"];
  };
  "/v2/projects/namespace-by-name/{name}": {
    /** Update namespace */
    get: operations["getByName_1"];
  };
  "/v2/projects/keys/search": {
    /** This endpoint helps you to find desired key by keyName, base translation or translation in specified language. */
    get: operations["searchForKey_1"];
  };
  "/v2/projects/activity": {
    /** Returns project history */
    get: operations["getActivity_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations": {
    /**
     * Get translations 
     * @description Returns translations prepared to import.
     */
    get: operations["getImportTranslations_1"];
  };
  "/v2/projects/import/result/languages/{languageId}": {
    /**
     * Get import language 
     * @description Returns language prepared to import.
     */
    get: operations["getImportLanguage_1"];
    /**
     * Delete language 
     * @description Deletes language prepared to import.
     */
    delete: operations["deleteLanguage_1"];
  };
  "/v2/projects/import/result/files/{importFileId}/issues": {
    /**
     * Get file issues 
     * @description Returns issues for uploaded file.
     */
    get: operations["getImportFileIssues_1"];
  };
  "/v2/projects/import/result": {
    /**
     * Get result 
     * @description Returns the result of preparation.
     */
    get: operations["getImportResult_1"];
  };
  "/v2/projects/import/all-namespaces": {
    /**
     * Get namespaces 
     * @description Returns all existing and imported namespaces
     */
    get: operations["getAllNamespaces_3"];
  };
  "/v2/projects/translations/{translationId}/history": {
    /**
     * Returns history of specific translation. 
     * 
     * Sorting is not supported for supported. It is automatically sorted from newest to oldest.
     */
    get: operations["getTranslationHistory_1"];
  };
  "/v2/projects/translations/{languages}": {
    /** Returns all translations for specified languages */
    get: operations["getAllTranslations_1"];
  };
  "/v2/projects/translations/select-all": {
    /** Get select all keys */
    get: operations["getSelectAllKeyIds_1"];
  };
  "/v2/projects/stats/daily-activity": {
    /** Returns project daily amount of events */
    get: operations["getProjectDailyActivity_1"];
  };
  "/v2/projects/stats": {
    /** Returns project stats */
    get: operations["getProjectStats_1"];
  };
  "/v2/api-keys/current": {
    /** Returns current API key info */
    get: operations["getCurrent_1"];
  };
  "/api/project/export/jsonZip": {
    /**
     * Exports data as ZIP of jsons 
     * @deprecated
     */
    get: operations["doExportJsonZip_1"];
  };
  "/v2/projects/keys/{keyId}/tags/{tagId}": {
    /** Removes tag with provided id from key with provided id */
    delete: operations["removeTag_1"];
  };
  "/v2/projects/keys/{ids}": {
    /** Deletes one or multiple keys by their IDs */
    delete: operations["delete_2"];
  };
  "/v2/projects/keys/{keyId}/screenshots/{ids}": {
    /** Deletes multiple screenshots by ids */
    delete: operations["deleteScreenshots"];
  };
  "/v2/image-upload/{ids}": {
    /** Deletes uploaded images */
    delete: operations["delete_9"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Avatar: {
      large: string;
      thumbnail: string;
    };
    LanguageModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description Language name in english 
       * @example Czech
       */
      name: string;
      /**
       * @description Language tag according to BCP 47 definition 
       * @example cs-CZ
       */
      tag: string;
      /**
       * @description Language name in this language 
       * @example čeština
       */
      originalName?: string;
      /**
       * @description Language flag emoji as UTF-8 emoji 
       * @example 🇨🇿
       */
      flagEmoji?: string;
      /**
       * @description Whether is base language of project 
       * @example false
       */
      base: boolean;
    };
    UpdateNamespaceDto: {
      name: string;
    };
    NamespaceModel: {
      /**
       * Format: int64 
       * @description The id of namespace 
       * @example 10000048
       */
      id: number;
      /** @example homepage */
      name: string;
    };
    TagKeyDto: {
      name: string;
    };
    TagModel: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    ComplexEditKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /** @description Translations to update */
      translations?: {
        [key: string]: string | undefined;
      };
      /** @description Tags of the key. If not provided tags won't be modified */
      tags?: (string)[];
      /** @description IDs of screenshots to delete */
      screenshotIdsToDelete?: (number)[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: (number)[];
      screenshotsToAdd?: (components["schemas"]["KeyScreenshotDto"])[];
    };
    KeyInScreenshotPositionDto: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    KeyScreenshotDto: {
      text?: string;
      /**
       * Format: int64 
       * @description Ids of screenshot uploaded with /v2/image-upload endpoint
       */
      uploadedImageId: number;
      positions?: (components["schemas"]["KeyInScreenshotPositionDto"])[];
    };
    KeyInScreenshotModel: {
      /** Format: int64 */
      keyId: number;
      position?: components["schemas"]["KeyInScreenshotPosition"];
      keyName: string;
      keyNamespace?: string;
      originalText?: string;
    };
    KeyInScreenshotPosition: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    KeyWithDataModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key 
       * @example homepage
       */
      namespace?: string;
      /**
       * @description Translations object containing values updated in this request 
       * @example {
       *   "en": {
       *     "id": 100000003,
       *     "text": "This is super translation!"
       *   }
       * }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"] | undefined;
      };
      /** @description Tags of key */
      tags: (components["schemas"]["TagModel"])[];
      /** @description Screenshots of the key */
      screenshots: (components["schemas"]["ScreenshotModel"])[];
    };
    /** @description Screenshots of the key */
    ScreenshotModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description File name, which may be downloaded from the screenshot path.
       * 
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      filename: string;
      /**
       * @description Thumbnail file name, which may be downloaded from the screenshot path.
       * 
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      thumbnail: string;
      fileUrl: string;
      thumbnailUrl: string;
      /** Format: date-time */
      createdAt?: string;
      keyReferences: (components["schemas"]["KeyInScreenshotModel"])[];
      location?: string;
    };
    /**
     * @description Translations object containing values updated in this request 
     * @example {
     *   "en": {
     *     "id": 100000003,
     *     "text": "This is super translation!"
     *   }
     * }
     */
    TranslationModel: {
      /**
       * Format: int64 
       * @description Id of translation record
       */
      id: number;
      /** @description Translation text */
      text?: string;
      /**
       * @description State of translation 
       * @enum {string}
       */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * @description Which machine translation service was used to auto translate this 
       * @enum {string}
       */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE";
    };
    EditKeyDto: {
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
    };
    KeyModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key 
       * @example homepage
       */
      namespace?: string;
    };
    SetFileNamespaceRequest: {
      namespace?: string;
    };
    TranslationCommentModel: {
      /**
       * Format: int64 
       * @description Id of translation comment record
       */
      id: number;
      /** @description Text of comment */
      text: string;
      /**
       * @description State of translation 
       * @enum {string}
       */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      author: components["schemas"]["UserAccountModel"];
      /**
       * Format: date-time 
       * @description Date when it was created
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description Date when it was updated
       */
      updatedAt: string;
    };
    /** @description User who created the comment */
    UserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      avatar?: components["schemas"]["Avatar"];
      /** @enum {string} */
      globalServerRole: "USER" | "ADMIN";
      deleted: boolean;
    };
    TranslationCommentDto: {
      text: string;
      /** @enum {string} */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    SetTranslationsWithKeyDto: {
      /**
       * @description Key name to set translations for 
       * @example what_a_key_to_translate
       */
      key: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation 
       * @example {
       *   "en": "What a translated value!",
       *   "cs": "Jaká to přeložená hodnota!"
       * }
       */
      translations: {
        [key: string]: string | undefined;
      };
      /**
       * @description List of languages to return translations for. 
       * 
       * If not provided, only modified translation will be provided.
       *      
       * @example [
       *   "en",
       *   "de",
       *   "fr"
       * ]
       */
      languagesToReturn?: (string)[];
    };
    SetTranslationsResponseModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * @description The namespace of the key 
       * @example homepage
       */
      keyNamespace?: string;
      /**
       * @description Translations object containing values updated in this request 
       * @example {
       *   "en": {
       *     "id": 100000003,
       *     "text": "This is super translation!"
       *   }
       * }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"] | undefined;
      };
    };
    LanguageDto: {
      /**
       * @description Language name in english 
       * @example Czech
       */
      name: string;
      /**
       * @description Language tag according to BCP 47 definition 
       * @example cs-CZ
       */
      originalName: string;
      /**
       * @description Language name in this language 
       * @example čeština
       */
      tag: string;
      /**
       * @description Language flag emoji as UTF-8 emoji 
       * @example 🇨🇿
       */
      flagEmoji?: string;
    };
    GetKeysRequestDto: {
      keys: (components["schemas"]["KeyDefinitionDto"])[];
      /** @description Tags to return language translations in */
      languageTags: (string)[];
    };
    KeyDefinitionDto: {
      name: string;
      namespace?: string;
    };
    CollectionModelKeyWithDataModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeyWithDataModel"])[];
      };
    };
    ImportKeysResolvableDto: {
      keys: (components["schemas"]["ImportKeysResolvableItemDto"])[];
    };
    ImportKeysResolvableItemDto: {
      /**
       * @description Key name to set translations for 
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      screenshots?: (components["schemas"]["KeyScreenshotDto"])[];
      /** @description Object mapping language tag to translation */
      translations: {
        [key: string]: components["schemas"]["ImportTranslationResolvableDto"] | undefined;
      };
    };
    /** @description Object mapping language tag to translation */
    ImportTranslationResolvableDto: {
      /**
       * @description Translation text 
       * @example Hello! I am a translation!
       */
      text: string;
      /**
       * @description Determines, how conflict is resolved.
       * 
       * - KEEP: Translation is not changed
       * - OVERRIDE: Translation is overridden
       * - NEW: New translation is created)
       *  
       * @example Hello! I am a translation! 
       * @enum {string}
       */
      resolution: "KEEP" | "OVERRIDE" | "NEW";
    };
    KeyImportResolvableResultModel: {
      /** @description List of keys */
      keys: (components["schemas"]["KeyModel"])[];
      /** @description Map uploadedImageId to screenshot */
      screenshots: {
        [key: string]: components["schemas"]["ScreenshotModel"] | undefined;
      };
    };
    ImportKeysDto: {
      keys: (components["schemas"]["ImportKeysItemDto"])[];
    };
    ImportKeysItemDto: {
      /**
       * @description Key name to set translations for 
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation 
       * @example {
       *   "en": "What a translated value!",
       *   "cs": "Jaká to přeložená hodnota!"
       * }
       */
      translations: {
        [key: string]: string | undefined;
      };
    };
    CreateKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      translations?: {
        [key: string]: string | undefined;
      };
      tags?: (string)[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: (number)[];
      screenshots?: (components["schemas"]["KeyScreenshotDto"])[];
    };
    ErrorResponseBody: {
      code: string;
      params?: (Record<string, never>)[];
    };
    ImportAddFilesResultModel: {
      errors: (components["schemas"]["ErrorResponseBody"])[];
      result?: components["schemas"]["PagedModelImportLanguageModel"];
    };
    ImportLanguageModel: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      existingLanguageId?: number;
      existingLanguageTag?: string;
      existingLanguageAbbreviation?: string;
      existingLanguageName?: string;
      importFileName: string;
      /** Format: int64 */
      importFileId: number;
      /** Format: int32 */
      importFileIssueCount: number;
      namespace?: string;
      /** Format: int32 */
      totalCount: number;
      /** Format: int32 */
      conflictCount: number;
      /** Format: int32 */
      resolvedCount: number;
    };
    PageMetadata: {
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int64 */
      totalPages?: number;
      /** Format: int64 */
      number?: number;
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: (components["schemas"]["ImportLanguageModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ExportParams: {
      languages?: (string)[];
      /** @enum {string} */
      format: "JSON" | "XLIFF";
      structureDelimiter?: string;
      filterKeyId?: (number)[];
      filterKeyIdNot?: (number)[];
      filterTag?: string;
      filterKeyPrefix?: string;
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
      filterNamespace?: (string)[];
      zip: boolean;
    };
    StreamingResponseBody: Record<string, never>;
    TranslationCommentWithLangKeyDto: {
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      languageId: number;
      text: string;
      /** @enum {string} */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    TranslationWithCommentModel: {
      translation: components["schemas"]["TranslationModel"];
      comment: components["schemas"]["TranslationCommentModel"];
    };
    SuggestRequestDto: {
      /**
       * Format: int64 
       * @description Key Id to get results for. Use when key is stored already.
       */
      keyId: number;
      /** Format: int64 */
      targetLanguageId: number;
      /** @description Text value of base translation. Useful, when base translation is not stored yet. */
      baseText?: string;
    };
    PagedModelTranslationMemoryItemModel: {
      _embedded?: {
        translationMemoryItems?: (components["schemas"]["TranslationMemoryItemModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    TranslationMemoryItemModel: {
      targetText: string;
      baseText: string;
      keyName: string;
      /** Format: float */
      similarity: number;
    };
    SuggestResultModel: {
      /**
       * @description Results provided by enabled services 
       * @example {
       *   "GOOGLE": "This was translated by Google",
       *   "AWS": "This was translated by AWS",
       *   "DEEPL": "This was translated by DeepL",
       *   "AZURE": "This was translated by Azure Cognitive"
       * }
       */
      machineTranslations?: {
        [key: string]: string | undefined;
      };
      /** Format: int64 */
      translationCreditsBalanceBefore: number;
      /** Format: int64 */
      translationCreditsBalanceAfter: number;
      /**
       * Format: int64 
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceBefore: number;
      /**
       * Format: int64 
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceAfter: number;
    };
    ScreenshotInfoDto: {
      text?: string;
      positions?: (components["schemas"]["KeyInScreenshotPositionDto"])[];
      location?: string;
    };
    ImageUploadInfoDto: {
      location?: string;
    };
    UploadedImageModel: {
      /** Format: int64 */
      id: number;
      filename: string;
      fileUrl: string;
      requestFilename: string;
      /** Format: date-time */
      createdAt: string;
      location?: string;
    };
    CollectionModelUsedNamespaceModel: {
      _embedded?: {
        namespaces?: (components["schemas"]["UsedNamespaceModel"])[];
      };
    };
    UsedNamespaceModel: {
      /**
       * Format: int64 
       * @description The id of namespace. Null for default namespace. 
       * @example 10000048
       */
      id?: number;
      /**
       * @description Name of namespace. Null if default. 
       * @example homepage
       */
      name?: string;
    };
    PagedModelTagModel: {
      _embedded?: {
        tags?: (components["schemas"]["TagModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelNamespaceModel: {
      _embedded?: {
        namespaces?: (components["schemas"]["NamespaceModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    KeySearchResultView: {
      name: string;
      /** Format: int64 */
      id: number;
      baseTranslation?: string;
      translation?: string;
      namespace?: string;
    };
    KeySearchSearchResultModel: {
      view?: components["schemas"]["KeySearchResultView"];
      name: string;
      /** Format: int64 */
      id: number;
      baseTranslation?: string;
      translation?: string;
      namespace?: string;
    };
    PagedModelKeySearchSearchResultModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeySearchSearchResultModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    EntityDescriptionWithRelations: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    ExistenceEntityDescription: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: {
        [key: string]: Record<string, never> | undefined;
      };
      relations: {
        [key: string]: components["schemas"]["EntityDescriptionWithRelations"] | undefined;
      };
      exists?: boolean;
    };
    ModifiedEntityModel: {
      /** Format: int64 */
      entityId: number;
      description?: {
        [key: string]: Record<string, never> | undefined;
      };
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"] | undefined;
      };
      relations?: {
        [key: string]: components["schemas"]["ExistenceEntityDescription"] | undefined;
      };
      exists?: boolean;
    };
    PagedModelProjectActivityModel: {
      _embedded?: {
        activities?: (components["schemas"]["ProjectActivityModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ProjectActivityAuthorModel: {
      /** Format: int64 */
      id: number;
      username?: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
    };
    ProjectActivityModel: {
      /** Format: int64 */
      revisionId: number;
      /** Format: int64 */
      timestamp: number;
      /** @enum {string} */
      type: "UNKNOWN" | "SET_TRANSLATION_STATE" | "SET_TRANSLATIONS" | "DISMISS_AUTO_TRANSLATED_STATE" | "TRANSLATION_COMMENT_ADD" | "TRANSLATION_COMMENT_DELETE" | "TRANSLATION_COMMENT_EDIT" | "TRANSLATION_COMMENT_SET_STATE" | "SCREENSHOT_DELETE" | "SCREENSHOT_ADD" | "KEY_TAGS_EDIT" | "KEY_NAME_EDIT" | "KEY_DELETE" | "CREATE_KEY" | "COMPLEX_EDIT" | "IMPORT" | "CREATE_LANGUAGE" | "EDIT_LANGUAGE" | "DELETE_LANGUAGE" | "CREATE_PROJECT" | "EDIT_PROJECT" | "NAMESPACE_EDIT";
      author?: components["schemas"]["ProjectActivityAuthorModel"];
      modifiedEntities?: {
        [key: string]: (components["schemas"]["ModifiedEntityModel"])[] | undefined;
      };
      meta?: {
        [key: string]: Record<string, never> | undefined;
      };
      counts?: {
        [key: string]: number | undefined;
      };
    };
    PropertyModification: {
      old?: Record<string, never>;
      new?: Record<string, never>;
    };
    ImportTranslationModel: {
      /** Format: int64 */
      id: number;
      text?: string;
      keyName: string;
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      conflictId?: number;
      conflictText?: string;
      override: boolean;
      resolved: boolean;
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: (components["schemas"]["ImportTranslationModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    EntityModelImportFileIssueView: {
      /** Format: int64 */
      id: number;
      /** @enum {string} */
      type: "KEY_IS_NOT_STRING" | "MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE" | "VALUE_IS_NOT_STRING" | "KEY_IS_EMPTY" | "VALUE_IS_EMPTY" | "PO_MSGCTXT_NOT_SUPPORTED" | "ID_ATTRIBUTE_NOT_PROVIDED" | "TARGET_NOT_PROVIDED" | "TRANSLATION_TOO_LONG";
      params: (components["schemas"]["ImportFileIssueParamView"])[];
    };
    ImportFileIssueParamView: {
      value?: string;
      /** @enum {string} */
      type: "KEY_NAME" | "KEY_ID" | "LANGUAGE_ID" | "KEY_INDEX" | "VALUE" | "LINE" | "FILE_NODE_ORIGINAL";
    };
    PagedModelEntityModelImportFileIssueView: {
      _embedded?: {
        importFileIssueViews?: (components["schemas"]["EntityModelImportFileIssueView"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelImportNamespaceModel: {
      _embedded?: {
        namespaces?: (components["schemas"]["ImportNamespaceModel"])[];
      };
    };
    ImportNamespaceModel: {
      /**
       * Format: int64 
       * @description The id of namespace. When null, namespace doesn't exist and will be created by import. 
       * @example 10000048
       */
      id?: number;
      /** @example homepage */
      name: string;
    };
    PagedModelTranslationCommentModel: {
      _embedded?: {
        translationComments?: (components["schemas"]["TranslationCommentModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationHistoryModel: {
      _embedded?: {
        revisions?: (components["schemas"]["TranslationHistoryModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    /** @description Author of the change */
    SimpleUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
    };
    TranslationHistoryModel: {
      /** @description Modified fields */
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"] | undefined;
      };
      /**
       * Format: int64 
       * @description Unix timestamp of the revision
       */
      timestamp: number;
      author?: components["schemas"]["SimpleUserAccountModel"];
      /** @enum {string} */
      revisionType: "ADD" | "MOD" | "DEL";
    };
    SelectAllResponse: {
      ids: (number)[];
    };
    KeyWithTranslationsModel: {
      /**
       * Format: int64 
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Name of key 
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * Format: int64 
       * @description The namespace id of the key 
       * @example 100000282
       */
      keyNamespaceId?: number;
      /**
       * @description The namespace of the key 
       * @example homepage
       */
      keyNamespace?: string;
      /** @description Tags of key */
      keyTags: (components["schemas"]["TagModel"])[];
      /**
       * Format: int64 
       * @description Count of screenshots provided for the key 
       * @example 1
       */
      screenshotCount: number;
      /** @description Key screenshots. Not provided when API key hasn't screenshots.view scope permission. */
      screenshots?: (components["schemas"]["ScreenshotModel"])[];
      /**
       * @description Translations object 
       * @example 
       *     {
       *       "en": {
       *         "id": 100000003, 
       *         "text": "This is super translation!"
       *         "state": "TRANSLATED",
       *         "commentCount": 1
       *       }
       *     }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationViewModel"] | undefined;
      };
    };
    KeysWithTranslationsPageModel: {
      _embedded?: {
        keys?: (components["schemas"]["KeyWithTranslationsModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
      /** @description Provided languages data */
      selectedLanguages: (components["schemas"]["LanguageModel"])[];
      /**
       * @description Cursor to get next data 
       * @example eyJrZXlJZCI6eyJkaXJlY3Rpb24iOiJBU0MiLCJ2YWx1ZSI6IjEwMDAwMDAxMjAifX0=
       */
      nextCursor?: string;
    };
    /**
     * @description Translations object 
     * @example 
     *     {
     *       "en": {
     *         "id": 100000003, 
     *         "text": "This is super translation!"
     *         "state": "TRANSLATED",
     *         "commentCount": 1
     *       }
     *     }
     */
    TranslationViewModel: {
      /**
       * Format: int64 
       * @description Id of translation record
       */
      id: number;
      /** @description Translation text */
      text?: string;
      /**
       * @description State of translation 
       * @enum {string}
       */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * @description Which machine translation service was used to auto translate this 
       * @enum {string}
       */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE";
      /**
       * Format: int64 
       * @description Count of translation comments
       */
      commentCount: number;
      /**
       * Format: int64 
       * @description Count of unresolved translation comments
       */
      unresolvedCommentCount: number;
      /** @description Was translation memory used to translate this? */
      fromTranslationMemory: boolean;
    };
    LanguageStatsModel: {
      /** Format: int64 */
      languageId?: number;
      languageTag?: string;
      languageName?: string;
      languageOriginalName?: string;
      languageFlagEmoji?: string;
      /** Format: int64 */
      translatedKeyCount: number;
      /** Format: int64 */
      translatedWordCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: int64 */
      reviewedKeyCount: number;
      /** Format: int64 */
      reviewedWordCount: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      untranslatedKeyCount: number;
      /** Format: int64 */
      untranslatedWordCount: number;
      /** Format: double */
      untranslatedPercentage: number;
    };
    ProjectStatsModel: {
      /** Format: int64 */
      projectId: number;
      /** Format: int32 */
      languageCount: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      baseWordsCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      membersCount: number;
      /** Format: int64 */
      tagCount: number;
      languageStats: (components["schemas"]["LanguageStatsModel"])[];
    };
    PagedModelLanguageModel: {
      _embedded?: {
        languages?: (components["schemas"]["LanguageModel"])[];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelScreenshotModel: {
      _embedded?: {
        screenshots?: (components["schemas"]["ScreenshotModel"])[];
      };
    };
    ApiKeyWithLanguagesModel: {
      /**
       * @description Languages for which user has translate permission.
       * 
       * If null, all languages are permitted.
       */
      permittedLanguageIds?: (number)[];
      /** Format: int64 */
      id: number;
      userFullName?: string;
      projectName: string;
      scopes: (string)[];
      /** Format: int64 */
      lastUsedAt?: number;
      username?: string;
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    DeleteKeysDto: {
      /** @description IDs of keys to delete */
      ids: (number)[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  update_1: {
    /** Update namespace */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNamespaceDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  tagKey_1: {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TagModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  complexEdit_1: {
    /** More */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComplexEditKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  edit_1: {
    /** Edits key name */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetOverride_1: {
    /**
     * Resolve conflict (override) 
     * @description Resolves translation conflict. The old translation will be overridden.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting_1: {
    /**
     * Resolve conflict (keep existing) 
     * @description Resolves translation conflict. The old translation will be kept.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetOverride_3: {
    /**
     * Resolve all translation conflicts (override) 
     * @description Resolves all translation conflicts for provided language. The old translations will be overridden.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting_3: {
    /**
     * Resolve all translation conflicts (keep existing) 
     * @description Resolves all translation conflicts for provided language. The old translations will be kept.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  selectExistingLanguage_1: {
    /**
     * Pair existing language 
     * @description Sets existing language to pair with language to import. Data will be imported to selected existing language when applied.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        importLanguageId: number;
        existingLanguageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resetExistingLanguage_1: {
    /**
     * Reset existing language pairing 
     * @description Resets existing language paired with language to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        importLanguageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  selectNamespace_1: {
    /**
     * Select namespace 
     * @description Sets namespace for file to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        fileId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetFileNamespaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  applyImport_1: {
    /**
     * Apply 
     * @description Imports the data prepared in previous step
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        forceMode?: "OVERRIDE" | "KEEP" | "NO_FORCE";
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslationState_1: {
    /** Sets translation state */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
        state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setState_1: {
    /** Sets state of translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        commentId: number;
        state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_4: {
    /** Returns single translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_3: {
    /** Updates single translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_6: {
    /** Deletes the translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  dismissAutoTranslatedState_1: {
    /** Removes "auto translated" indication */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslations_1: {
    /** Returns translations in project */
    parameters?: {
        /** @description Cursor to get next data */
        /**
         * @description Translation state in the format: languageTag,state. You can use this parameter multiple times.
         * 
         * When used with multiple states for same language it is applied with logical OR. 
         *  
         * When used with multiple languages, it is applied with logical AND.
         */
        /**
         * @description Languages to be contained in response.
         *                 
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de) 
         * @example en
         */
        /** @description String to search in key name or translation text */
        /** @description Selects key with provided names. Use this param multiple times to fetch more keys. */
        /** @description Selects key with provided ID. Use this param multiple times to fetch more keys. */
        /** @description Selects only keys, where translation is missing in any language */
        /** @description Selects only keys, where translation is provided in any language */
        /**
         * @description Selects only keys, where translation is missing in specified language 
         * @example en-US
         */
        /**
         * @description Selects only keys, where translation is provided in specified language 
         * @example en-US
         */
        /** @description Selects only keys with screenshots */
        /** @description Selects only keys without screenshots */
        /**
         * @description Filter namespaces. 
         * 
         * To filter default namespace, set to empty string.
         */
        /** @description Selects only keys with provided tag */
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        cursor?: string;
        filterState?: (string)[];
        languages?: (string)[];
        search?: string;
        filterKeyName?: (string)[];
        filterKeyId?: (number)[];
        filterUntranslatedAny?: boolean;
        filterTranslatedAny?: boolean;
        filterUntranslatedInLang?: string;
        filterTranslatedInLang?: string;
        filterHasScreenshot?: boolean;
        filterHasNoScreenshot?: boolean;
        filterNamespace?: (string)[];
        filterTag?: (string)[];
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeysWithTranslationsPageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslations_1: {
    /** Sets translations for existing key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createOrUpdateTranslations_1: {
    /** Sets translations for existing or not existing key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  editLanguage_1: {
    /** Edits language */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteLanguage_3: {
    /** Deletes specific language */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  autoTranslate_1: {
    /**
     * Auto translates keys 
     * @description Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     * 
     * This will replace the the existing translation with the result obtained from specified source!
     */
    parameters: {
        /**
         * @description Tags of languages to auto-translate. 
         * When no languages provided, it translates only untranslated languages.
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        languages?: (string)[];
        useMachineTranslation?: boolean;
        useTranslationMemory?: boolean;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getInfo_1: {
    /** Returns information about keys. (KeyData, Screenshots, Translation in specified language)If key is not found, it's not included in the response. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetKeysRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelKeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  importKeys_1: {
    /** Import's new keys with translations. Translations can be updated, when specified. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysResolvableDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyImportResolvableResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  importKeys_3: {
    /** Import's new keys with translations. If key already exists, it's translations are not updated. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysDto"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_2: {
    /** Creates new key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_3: {
    /** Creates new key */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_4: {
    /** Deletes one or multiple keys by their IDs in request body */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteKeysDto"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  addFiles_1: {
    /**
     * Add files 
     * @description Prepares provided files to import.
     */
    parameters?: {
        /** @description When importing structured JSONs, you can set the delimiter which will be used in names of improted keys. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        structureDelimiter?: string;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          files: (string)[];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportAddFilesResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  cancelImport_1: {
    /**
     * Delete 
     * @description Deletes prepared import data.
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  export_1: {
    /** Exports data */
    parameters?: {
        /**
         * @description Languages to be contained in export.
         *                 
         * If null, all languages are exported 
         * @example en
         */
        /** @description Format to export to */
        /**
         * @description Delimiter to structure file content. 
         * 
         * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
         * 
         * When null, resulting file won't be structured.
         */
        /** @description Filter key IDs to be contained in export */
        /** @description Filter key IDs not to be contained in export */
        /** @description Filter keys tagged by */
        /** @description Filter keys with prefix */
        /** @description Filter translations with state. By default, everything except untranslated is exported. */
        /** @description Select one ore multiple namespaces to export */
        /**
         * @description If false, it doesn't return zip of files, but it returns single file.
         *       
         * This is possible only when single language is exported. Otherwise it returns "400 - Bad Request" response.
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        languages?: (string)[];
        format?: "JSON" | "XLIFF";
        structureDelimiter?: string;
        filterKeyId?: (number)[];
        filterKeyIdNot?: (number)[];
        filterTag?: string;
        filterKeyPrefix?: string;
        filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
        filterNamespace?: (string)[];
        zip?: boolean;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  exportPost_1: {
    /** Exports data (post). Useful when providing params exceeding allowed query size. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportParams"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_4: {
    /** Returns translation comments of translation */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_5: {
    /** Creates a translation comment */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_7: {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentWithLangKeyDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationWithCommentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  suggestTranslationMemory_1: {
    /**
     * Suggests machine translations from translation memory.
     * 
     * The result is always sorted by similarity, so sorting is not supported.
     */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationMemoryItemModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  suggestMachineTranslations_1: {
    /** Suggests machine translations from enabled services */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_6: {
    /** Returns all project languages */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelLanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createLanguage_1: {
    /** Creates language */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getKeyScreenshots: {
    /** Returns all screenshots for specified key */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelScreenshotModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadScreenshot: {
    /** Upload screenshot for specific key */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          screenshot: string;
          info?: components["schemas"]["ScreenshotInfoDto"];
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["ScreenshotModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  upload: {
    /** Uploads an image for later use */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image: string;
          info?: components["schemas"]["ImageUploadInfoDto"];
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": components["schemas"]["UploadedImageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getUsedNamespaces_1: {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelUsedNamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_2: {
    /** Returns project tags */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        search?: string;
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTagModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllNamespaces_1: {
    /** Returns all project namespaces */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelNamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getByName_1: {
    /** Update namespace */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchForKey_1: {
    /** This endpoint helps you to find desired key by keyName, base translation or translation in specified language. */
    parameters: {
        /** @description Search query */
        /** @description Language to search in */
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query: {
        search: string;
        languageTag?: string;
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelKeySearchSearchResultModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getActivity_1: {
    /** Returns project history */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelProjectActivityModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportTranslations_1: {
    /**
     * Get translations 
     * @description Returns translations prepared to import.
     */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        onlyConflicts?: boolean;
        onlyUnresolved?: boolean;
        search?: string;
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportTranslationModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportLanguage_1: {
    /**
     * Get import language 
     * @description Returns language prepared to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportLanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteLanguage_1: {
    /**
     * Delete language 
     * @description Deletes language prepared to import.
     */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportFileIssues_1: {
    /**
     * Get file issues 
     * @description Returns issues for uploaded file.
     */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        importFileId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelEntityModelImportFileIssueView"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getImportResult_1: {
    /**
     * Get result 
     * @description Returns the result of preparation.
     */
    parameters?: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportLanguageModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllNamespaces_3: {
    /**
     * Get namespaces 
     * @description Returns all existing and imported namespaces
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelImportNamespaceModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslationHistory_1: {
    /**
     * Returns history of specific translation. 
     * 
     * Sorting is not supported for supported. It is automatically sorted from newest to oldest.
     */
    parameters: {
        /** @description Zero-based page index (0..N) */
        /** @description The size of the page to be returned */
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        page?: number;
        size?: number;
        sort?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        translationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationHistoryModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllTranslations_1: {
    /** Returns all translations for specified languages */
    parameters: {
        /** @description Namespace to return */
        /**
         * @description Delimiter to structure response content. 
         * 
         * e.g. For key "home.header.title" would result in {"home": {"header": {"title": "Hello"}}} structure.
         * 
         * When null, resulting file will be a flat key-value object.
         */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ns?: string;
        structureDelimiter?: string;
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
        /**
         * @description Comma-separated language tags to return translations in. 
         * @example en,de,fr
         */
      path: {
        languages: (string)[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getSelectAllKeyIds_1: {
    /** Get select all keys */
    parameters?: {
        /**
         * @description Translation state in the format: languageTag,state. You can use this parameter multiple times.
         * 
         * When used with multiple states for same language it is applied with logical OR. 
         *  
         * When used with multiple languages, it is applied with logical AND.
         */
        /**
         * @description Languages to be contained in response.
         *                 
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de) 
         * @example en
         */
        /** @description String to search in key name or translation text */
        /** @description Selects key with provided names. Use this param multiple times to fetch more keys. */
        /** @description Selects key with provided ID. Use this param multiple times to fetch more keys. */
        /** @description Selects only keys, where translation is missing in any language */
        /** @description Selects only keys, where translation is provided in any language */
        /**
         * @description Selects only keys, where translation is missing in specified language 
         * @example en-US
         */
        /**
         * @description Selects only keys, where translation is provided in specified language 
         * @example en-US
         */
        /** @description Selects only keys with screenshots */
        /** @description Selects only keys without screenshots */
        /**
         * @description Filter namespaces. 
         * 
         * To filter default namespace, set to empty string.
         */
        /** @description Selects only keys with provided tag */
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        filterState?: (string)[];
        languages?: (string)[];
        search?: string;
        filterKeyName?: (string)[];
        filterKeyId?: (number)[];
        filterUntranslatedAny?: boolean;
        filterTranslatedAny?: boolean;
        filterUntranslatedInLang?: string;
        filterTranslatedInLang?: string;
        filterHasScreenshot?: boolean;
        filterHasNoScreenshot?: boolean;
        filterNamespace?: (string)[];
        filterTag?: (string)[];
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SelectAllResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectDailyActivity_1: {
    /** Returns project daily amount of events */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/hal+json": {
            [key: string]: number | undefined;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectStats_1: {
    /** Returns project stats */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["ProjectStatsModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCurrent_1: {
    /** Returns current API key info */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyWithLanguagesModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  doExportJsonZip_1: {
    /**
     * Exports data as ZIP of jsons 
     * @deprecated
     */
    parameters?: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeTag_1: {
    /** Removes tag with provided id from key with provided id */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        keyId: number;
        tagId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_2: {
    /** Deletes one or multiple keys by their IDs */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        ids: (number)[];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteScreenshots: {
    /** Deletes multiple screenshots by ids */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        ids: (number)[];
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_9: {
    /** Deletes uploaded images */
    parameters: {
        /**
         * @description API key provided via query parameter. Will be deprecated in the future. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      query?: {
        ak?: string;
      };
        /**
         * @description API key provided via header. Safer since headers are not stored in server logs. 
         * @example tgpak_gm2dcxzynjvdqm3fozwwgmdjmvwdgojqonvxamldnu4hi5lp
         */
      header?: {
        "X-API-Key"?: string;
      };
      path: {
        ids: (number)[];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
